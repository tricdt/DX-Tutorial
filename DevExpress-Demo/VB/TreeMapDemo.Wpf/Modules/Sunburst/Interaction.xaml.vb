Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Windows.Data
Imports System.Windows.Markup
Imports System.Windows.Media
Imports DevExpress.Mvvm.DataAnnotations
Imports DevExpress.Mvvm.POCO
Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.TreeMap

Namespace TreeMapDemo

    <DevExpress.Xpf.DemoBase.CodeFileAttribute("Modules/Sunburst/Interaction.xaml")>
    <DevExpress.Xpf.DemoBase.CodeFileAttribute("Modules/Sunburst/Interaction.xaml.(cs)")>
    <DevExpress.Xpf.DemoBase.NoAutogeneratedCodeFilesAttribute>
    Public Partial Class SunburstInteractionDemo
        Inherits TreeMapDemo.TreeMapDemoModule

        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class

    <DevExpress.Mvvm.DataAnnotations.POCOViewModelAttribute>
    Public Class SunburstInteractionDemoViewModel

        Public Shared Function Create() As SunburstInteractionDemoViewModel
            Return DevExpress.Mvvm.POCO.ViewModelSource.Create(Function() New TreeMapDemo.SunburstInteractionDemoViewModel())
        End Function

        Public Overridable Property DataSource As List(Of TreeMapDemo.SaleItem)

        Public Overridable Property SelectedItems As IList

        Public Overridable Property SelectedItemOnChart As SaleItem

        Protected Sub New()
            Me.DataSource = TreeMapDemo.SaleItem.GetProductsByCompanies()
            Me.SelectedItems = Me.DataSource
        End Sub

        Protected Sub OnSelectedItemsChanged()
            If Me.SelectedItems Is Nothing OrElse Me.SelectedItems.Count = 0 Then Me.SelectedItems = Me.DataSource
        End Sub
    End Class

    Public Class SaleItem

        Private Shared _categorizedProducts As System.Collections.Generic.Dictionary(Of String, System.Collections.Generic.List(Of String))

        Private Shared ReadOnly Property CategorizedProducts As Dictionary(Of String, System.Collections.Generic.List(Of String))
            Get
                If TreeMapDemo.SaleItem._categorizedProducts Is Nothing Then
                    TreeMapDemo.SaleItem._categorizedProducts = New System.Collections.Generic.Dictionary(Of String, System.Collections.Generic.List(Of String))()
                    TreeMapDemo.SaleItem._categorizedProducts("Cameras") = New System.Collections.Generic.List(Of String)() From {"Camera", "Camcorder", "Binoculars", "Flash", "Tripod"}
                    TreeMapDemo.SaleItem._categorizedProducts("Cell Phones") = New System.Collections.Generic.List(Of String)() From {"Smartphone", "Sim Card"}
                    TreeMapDemo.SaleItem._categorizedProducts("Computers") = New System.Collections.Generic.List(Of String)() From {"Desktop", "Laptop", "Tablet", "Printer"}
                End If

                Return TreeMapDemo.SaleItem._categorizedProducts
            End Get
        End Property

        Private Shared ReadOnly palette As DevExpress.Xpf.TreeMap.PaletteBase = New DevExpress.Xpf.TreeMap.Office2016Palette()

        Private Shared ReadOnly CompanyColors As System.Collections.Generic.Dictionary(Of String, System.Windows.Media.Color) = New System.Collections.Generic.Dictionary(Of String, System.Windows.Media.Color) From {{"North", TreeMapDemo.SaleItem.palette(0)}, {"South", TreeMapDemo.SaleItem.palette(1)}, {"West", TreeMapDemo.SaleItem.palette(2)}, {"East", TreeMapDemo.SaleItem.palette(3)}}

        Public Shared ReadOnly Companies As String() = New String() {"North", "South", "West", "East"}

        Public Shared Function GetProductsByCompanies() As List(Of TreeMapDemo.SaleItem)
            Dim rnd As System.Random = New System.Random(1)
            Dim items As System.Collections.Generic.List(Of TreeMapDemo.SaleItem) = New System.Collections.Generic.List(Of TreeMapDemo.SaleItem)()
            For Each company As String In TreeMapDemo.SaleItem.Companies
                For Each category As String In TreeMapDemo.SaleItem.CategorizedProducts.Keys
                    For Each product As String In TreeMapDemo.SaleItem.CategorizedProducts(category)
                        Dim income As Integer = rnd.[Next](20, 100)
                        Dim revenue As Integer = income + rnd.[Next](20, 50)
                        items.Add(New TreeMapDemo.SaleItem() With {.Company = company, .Product = product, .Income = income, .Revenue = revenue, .Category = category, .Color = TreeMapDemo.SaleItem.CompanyColors(company)})
                    Next
                Next
            Next

            Return items
        End Function

        Public Property Product As String

        Public Property Company As String

        Public Property Income As Double

        Public Property Revenue As Double

        Public Property Category As String

        Public Property Color As Color
    End Class

    Friend Class SelectedItemsConverter
        Inherits System.Windows.Markup.MarkupExtension
        Implements System.Windows.Data.IValueConverter

        Public Property FullDataSource As IList

        Public Function Convert(ByVal value As Object, ByVal targetType As System.Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object Implements Global.System.Windows.Data.IValueConverter.Convert
            If value Is Nothing Then
                Return Me.FullDataSource
            Else
                Return value
            End If
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As System.Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object Implements Global.System.Windows.Data.IValueConverter.ConvertBack
            Return value
        End Function

        Public Overrides Function ProvideValue(ByVal serviceProvider As System.IServiceProvider) As Object
            Return Me
        End Function
    End Class

    Friend Class SalesColorizer
        Inherits DevExpress.Xpf.TreeMap.SunburstColorizerBase

        Public Overrides Function GetItemBrush(ByVal item As DevExpress.Xpf.TreeMap.ISunburstSectorInfo) As Brush
            Dim sourceObject As Object = item.SourceObject
            Dim saleItem As TreeMapDemo.SaleItem = If(TypeOf sourceObject Is System.Collections.IList, CType(CType(sourceObject, System.Collections.IList)(0), TreeMapDemo.SaleItem), CType(sourceObject, TreeMapDemo.SaleItem))
            Dim brush As System.Windows.Media.SolidColorBrush = New System.Windows.Media.SolidColorBrush(saleItem.Color)
            brush.Freeze()
            Return brush
        End Function

        Protected Overrides Function CreateObject() As TreeMapDependencyObject
            Return New TreeMapDemo.SalesColorizer()
        End Function
    End Class

    Friend Class HighlightConverter
        Inherits System.Windows.Markup.MarkupExtension
        Implements System.Windows.Data.IMultiValueConverter

        Public Function Convert(ByVal values As Object(), ByVal targetType As System.Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object Implements Global.System.Windows.Data.IMultiValueConverter.Convert
            Return values(0) Is values(1)
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetTypes As System.Type(), ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object() Implements Global.System.Windows.Data.IMultiValueConverter.ConvertBack
            Throw New System.NotSupportedException()
        End Function

        Public Overrides Function ProvideValue(ByVal serviceProvider As System.IServiceProvider) As Object
            Return Me
        End Function
    End Class
End Namespace
