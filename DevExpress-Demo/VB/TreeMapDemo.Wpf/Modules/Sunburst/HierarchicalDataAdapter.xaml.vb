Imports System
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports System.Reflection
Imports System.Windows.Data
Imports System.Xml.Linq
Imports DevExpress.Mvvm.DataAnnotations
Imports DevExpress.Mvvm.POCO
Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.TreeMap

Namespace TreeMapDemo

    <CodeFile("Modules/Sunburst/HierarchicalDataAdapter.xaml")>
    <CodeFile("Modules/Sunburst/HierarchicalDataAdapter.xaml.(cs)")>
    <NoAutogeneratedCodeFiles>
    Public Partial Class SunburstHierarchicalDataAdapterDemo
        Inherits TreeMapDemoModule

        Public Sub New()
            InitializeComponent()
        End Sub
    End Class

    Public Class TypeInfo

        Private ReadOnly nestedNamespacesField As List(Of TypeInfo) = New List(Of TypeInfo)()

        Private ReadOnly _namespace As String

        Private ReadOnly countField As Integer

        Public ReadOnly Property NestedNamespaces As List(Of TypeInfo)
            Get
                Return nestedNamespacesField
            End Get
        End Property

        Public ReadOnly Property [Namespace] As String
            Get
                Return _namespace
            End Get
        End Property

        Public ReadOnly Property Count As Integer
            Get
                Return countField
            End Get
        End Property

        Public Sub New(ByVal _namespace As String, ByVal count As Integer)
            Me._namespace = _namespace
            countField = count
        End Sub
    End Class

    Friend Module ColorizerNames

        Public Const PaletteColorizer As String = "Palette Colorizer"

        Public Const GroupGradientColorizer As String = "Group Gradient Colorizer"

        Public Const RangeColorizer As String = "Range Colorizer"
    End Module

    <POCOViewModel>
    Public Class SunburstHierarchicalDataAdapterDemoViewModel

        Public Shared Function Create() As SunburstHierarchicalDataAdapterDemoViewModel
            Return ViewModelSource.Create(Function() New SunburstHierarchicalDataAdapterDemoViewModel())
        End Function

        Public Overridable Property DataSource As List(Of TypeInfo)

        Public Overridable Property SelectedColorizer As String

        Public Overridable Property VaryColorInGroup As Boolean

        Public Overridable Property Colorizers As List(Of String)

        Public Overridable Property SelectedPalette As PaletteBase

        Public Overridable Property Palettes As List(Of PaletteBase)

        Public Overridable Property SelectedGradientColorizerMode As GradientColorizerMode

        Protected Sub New()
            DataSource = LoadDataFromXML()
            Palettes = CreatePalettesList()
            Colorizers = CreateColorizersList()
            SelectedPalette = Palettes.Where(Function(predicate) Equals(predicate.PaletteName, "Office 2016")).First()
            SelectedColorizer = PaletteColorizer
        End Sub

        Private Function CreateColorizersList() As List(Of String)
            Dim colorizers As List(Of String) = New List(Of String)(3)
            colorizers.Add(PaletteColorizer)
            colorizers.Add(GroupGradientColorizer)
            colorizers.Add(RangeColorizer)
            Return colorizers
        End Function

        Private Function CreatePalettesList() As List(Of PaletteBase)
            Dim palettes As List(Of PaletteBase) = New List(Of PaletteBase)()
            For Each type As Type In Assembly.GetAssembly(GetType(PredefinedPalette)).GetTypes().Where(Function(t) t.IsClass AndAlso Not t.IsAbstract AndAlso t.IsSubclassOf(GetType(PredefinedPalette)))
                palettes.Add(CType(Activator.CreateInstance(type), PredefinedPalette))
            Next

            palettes.Add(New TrafficLightPalette())
            Return palettes
        End Function

        Private Function LoadDataFromXML() As List(Of TypeInfo)
            Dim types As List(Of TypeInfo) = New List(Of TypeInfo)()
            Dim document As XDocument = LoadXDocumentFromResources("/Data/XtraBarsTypes.xml")
            If document IsNot Nothing Then
                For Each element As XElement In document.Element("ArrayOfTypeInfo").Elements()
                    FillTypeInfos(types, element)
                Next
            End If

            Return types
        End Function

        Private Sub FillTypeInfos(ByVal types As List(Of TypeInfo), ByVal element As XElement)
            Dim typeInfo As TypeInfo = New TypeInfo(element.Element("Namespace").Value, Convert.ToInt32(element.Element("TypesCount").Value, CultureInfo.InvariantCulture))
            For Each childElement As XElement In element.Element("NestedNamespaces").Elements()
                FillTypeInfos(typeInfo.NestedNamespaces, childElement)
            Next

            types.Add(typeInfo)
        End Sub

        Private prePalette As PaletteBase = Nothing

        Protected Sub OnSelectedColorizerChanged()
            If Equals(SelectedColorizer, RangeColorizer) Then
                prePalette = SelectedPalette
                SelectedPalette = Palettes.Last()
            ElseIf prePalette IsNot Nothing Then
                SelectedPalette = prePalette
                prePalette = Nothing
            End If
        End Sub
    End Class

    Public Class TrafficLightPalette
        Inherits CustomPalette

        Public Overrides ReadOnly Property PaletteName As String
            Get
                Return "Traffic Light (Custom)"
            End Get
        End Property

        Public Sub New()
            Colors.Add(Windows.Media.Colors.Green)
            Colors.Add(Windows.Media.Colors.Yellow)
            Colors.Add(Windows.Media.Colors.Red)
        End Sub
    End Class

    Public Class ColorizerConverter
        Implements IValueConverter

        Public Property PaletteColorizer As SunburstPaletteColorizer

        Public Property GroupGradientColorizer As SunburstGroupGradientColorizer

        Public Property RangeColorizer As SunburstRangeColorizer

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object Implements IValueConverter.Convert
            Dim colorizerName As String = CStr(value)
            Select Case colorizerName
                Case ColorizerNames.PaletteColorizer
                    Return PaletteColorizer
                Case ColorizerNames.GroupGradientColorizer
                    Return GroupGradientColorizer
                Case ColorizerNames.RangeColorizer
                    Return RangeColorizer
                Case Else
                    Throw New Exception("Unknown colorizer name")
            End Select
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object Implements IValueConverter.ConvertBack
            Dim colorizerType As Type = value.GetType()
            If colorizerType Is GetType(SunburstPaletteColorizer) Then Return ColorizerNames.PaletteColorizer
            If colorizerType Is GetType(SunburstGroupGradientColorizer) Then Return ColorizerNames.GroupGradientColorizer
            If colorizerType Is GetType(SunburstRangeColorizer) Then Return ColorizerNames.RangeColorizer
            Throw New Exception("Unknown colorizer type")
        End Function
    End Class
End Namespace
