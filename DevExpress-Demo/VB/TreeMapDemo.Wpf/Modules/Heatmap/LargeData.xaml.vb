Imports DevExpress.Xpf.Charts.Heatmap
Imports DevExpress.Xpf.DemoBase
Imports System
Imports System.Threading.Tasks
Imports System.Windows.Threading

Namespace TreeMapDemo

    <CodeFile("Modules/Heatmap/LargeData.xaml")>
    <CodeFile("Modules/Heatmap/LargeData.xaml.(cs)")>
    <NoAutogeneratedCodeFiles>
    Public Partial Class LargeData
        Inherits TreeMapDemoModule

        Private ReadOnly dataGenerator As HeatmapDataSourceGenerator

        Private ReadOnly timer As DispatcherTimer

        Private ReadOnly Property DataAdapter As HeatmapMatrixAdapter
            Get
                Return CType(heatmap.DataAdapter, HeatmapMatrixAdapter)
            End Get
        End Property

        Public Sub New()
            InitializeComponent()
            dataGenerator = New HeatmapDataSourceGenerator()
            heatmap.DataAdapter = New HeatmapMatrixAdapter() With {.XArguments = HeatmapDataSourceGenerator.GetArray(HeatmapDataSourceGenerator.SizeX), .YArguments = HeatmapDataSourceGenerator.GetArray(HeatmapDataSourceGenerator.SizeY)}
            timer = New DispatcherTimer() With {.Interval = TimeSpan.FromMilliseconds(50)}
            AddHandler timer.Tick, New EventHandler(Sub(_d, _e) Update())
            AddHandler Loaded, AddressOf LargeData_Loaded
            AddHandler Unloaded, AddressOf LargeData_Unloaded
        End Sub

        Private Sub LargeData_Unloaded(ByVal sender As Object, ByVal e As Windows.RoutedEventArgs)
            timer.IsEnabled = False
        End Sub

        Private Sub LargeData_Loaded(ByVal sender As Object, ByVal e As Windows.RoutedEventArgs)
            Task.Delay(100).ContinueWith(Function(t) CSharpImpl.__Assign(timer.IsEnabled, True))
        End Sub

        Private Sub Update()
            DataAdapter.Values = dataGenerator.GetMatrix()
        End Sub

        Protected Overrides Sub Hide()
            timer.IsEnabled = False
            MyBase.Hide()
        End Sub

        Private Class CSharpImpl

            <Obsolete("Please refactor calling code to use normal Visual Basic assignment")>
            Shared Function __Assign(Of T)(ByRef target As T, value As T) As T
                target = value
                Return value
            End Function
        End Class
    End Class
End Namespace
