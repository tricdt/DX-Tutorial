Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Globalization
Imports System.Linq
Imports System.Windows.Data
Imports System.Windows.Markup
Imports System.Windows.Media
Imports System.Xml.Linq
Imports DevExpress.Mvvm
Imports DevExpress.Mvvm.POCO
Imports DevExpress.Xpf.Charts
Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.Ribbon

Namespace TreeMapDemo

    <DevExpress.Xpf.DemoBase.CodeFileAttribute("Modules/Heatmap/Selection.xaml")>
    <DevExpress.Xpf.DemoBase.CodeFileAttribute("Modules/Heatmap/Selection.xaml.(cs)")>
    <DevExpress.Xpf.DemoBase.NoAutogeneratedCodeFilesAttribute>
    Public Partial Class HeatmapSelection
        Inherits TreeMapDemo.TreeMapDemoModule

        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class

    Public Class InteractionViewModel
        Inherits DevExpress.Mvvm.BindableBase

        Public Shared Function Create() As InteractionViewModel
            Return DevExpress.Mvvm.POCO.ViewModelSource.Create(Function() New TreeMapDemo.InteractionViewModel())
        End Function

        Private ReadOnly salesField As System.Collections.Generic.List(Of TreeMapDemo.ProductSale)

        Private selectedSalesField As System.Collections.ObjectModel.ObservableCollection(Of Object)

        Public ReadOnly Property Sales As List(Of TreeMapDemo.ProductSale)
            Get
                Return Me.salesField
            End Get
        End Property

        Public Overridable Property SelectedSales As ObservableCollection(Of Object)
            Get
                Return Me.selectedSalesField
            End Get

            Set(ByVal value As ObservableCollection(Of Object))
                If Me.selectedSalesField Is value Then Return
                Me.selectedSalesField = value
                If Me.selectedSalesField IsNot Nothing Then AddHandler Me.selectedSalesField.CollectionChanged, Sub(s, e) Me.RaisePropertyChanged("SelectedSales")
                Me.RaisePropertyChanged("SelectedSales")
            End Set
        End Property

        Protected Sub New()
            Me.salesField = Me.LoadData()
            Me.SelectedSales = New System.Collections.ObjectModel.ObservableCollection(Of Object)() From {Me.salesField(0)}
        End Sub

        Private Function LoadData() As List(Of TreeMapDemo.ProductSale)
            Dim data As System.Collections.Generic.List(Of TreeMapDemo.ProductSale) = New System.Collections.Generic.List(Of TreeMapDemo.ProductSale)()
            Try
                Dim sales_xml As System.Xml.Linq.XDocument = TreeMapDemo.DataLoader.LoadXDocumentFromResources("/Data/Sales.xml")
                For Each monthSale As System.Xml.Linq.XElement In sales_xml.Root.Elements()
                    Dim product As String = monthSale.Element(CType(("Product"), System.Xml.Linq.XName)).Value
                    Dim month As String = monthSale.Element(CType(("Month"), System.Xml.Linq.XName)).Value
                    Dim dailySales As System.Collections.Generic.List(Of TreeMapDemo.DailySale) = New System.Collections.Generic.List(Of TreeMapDemo.DailySale)()
                    For Each daySale As System.Xml.Linq.XElement In monthSale.Elements("SalesByDay").Elements("DailySale")
                        dailySales.Add(New TreeMapDemo.DailySale() With {.Product = product, .[Date] = System.Convert.ToDateTime(daySale.Element(CType(("Date"), System.Xml.Linq.XName)).Value), .Revenue = System.Convert.ToDouble(daySale.Element(CType(("Revenue"), System.Xml.Linq.XName)).Value)})
                    Next

                    data.Add(New TreeMapDemo.ProductSale() With {.SalesByDay = dailySales})
                Next
            Catch
            End Try

            Return data
        End Function
    End Class

    Public Class ProductSale

        Public ReadOnly Property Product As String
            Get
                Return Me.SalesByDay(CInt((0))).Product
            End Get
        End Property

        Public ReadOnly Property Month As String
            Get
                Return Me.SalesByDay(CInt((0))).[Date].ToString("MMMM")
            End Get
        End Property

        Public ReadOnly Property RevenueByMonth As Double
            Get
                Return Me.SalesByDay.Sum(Function(s) s.Revenue)
            End Get
        End Property

        Public Property SalesByDay As List(Of TreeMapDemo.DailySale)
    End Class

    Public Class DailySale

        Public Property Product As String

        Public Property Revenue As Double

        Public Property [Date] As DateTime
    End Class

    Public Class SelectedItemsToDataSourceConverter
        Inherits System.Windows.Markup.MarkupExtension
        Implements System.Windows.Data.IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As System.Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object Implements Global.System.Windows.Data.IValueConverter.Convert
            Dim selectedItems As System.Collections.Generic.IEnumerable(Of Object) = TryCast(value, System.Collections.Generic.IEnumerable(Of Object))
            If selectedItems Is Nothing Then Return Nothing
            Dim result As System.Collections.Generic.List(Of TreeMapDemo.DailySale) = New System.Collections.Generic.List(Of TreeMapDemo.DailySale)()
            For Each item As TreeMapDemo.ProductSale In selectedItems
                result.AddRange(item.SalesByDay)
            Next

            Return result
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As System.Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object Implements Global.System.Windows.Data.IValueConverter.ConvertBack
            Return value
        End Function

        Public Overrides Function ProvideValue(ByVal serviceProvider As System.IServiceProvider) As Object
            Return Me
        End Function
    End Class

    Public Class SaveOrderComparer
        Inherits System.Windows.Markup.MarkupExtension
        Implements System.Collections.IComparer

        Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer Implements Global.System.Collections.IComparer.Compare
            Return 0
        End Function

        Public Overrides Function ProvideValue(ByVal serviceProvider As System.IServiceProvider) As Object
            Return Me
        End Function
    End Class
End Namespace
