Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.Scheduling
Imports DevExpress.Xpf.Scheduling.Internal
Imports DevExpress.XtraScheduler
Imports DevExpress.XtraScheduler.Xml
Imports SchedulingDemo.ViewModels
Imports System
Imports System.Collections.Specialized
Imports System.Linq
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Documents

Namespace SchedulingDemo

    <NoAutogeneratedCodeFiles, CodeFiles("Modules/Highlighted/TimeZonesDemoModel.xaml", "Modules/Highlighted/TimeZonesDemoModel.xaml.(cs)", "ViewModels/Highlighted/TimeZonesDemoViewModel.(cs)")>
    Public Partial Class TimeZonesDemoModule
        Inherits SchedulingDemoModule

        Private ReadOnly Property DataSourceFactory As DataTemplate
            Get
                Return CType(Resources("DataSourceFactory"), DataTemplate)
            End Get
        End Property

        Private ReadOnly Property VM As TimeZonesDemoViewModel
            Get
                Return CType(DataContext, TimeZonesDemoViewModel)
            End Get
        End Property

        Public Sub New()
            InitializeComponent()
            dateTimeSavingMode.ItemsSource = DevExpress.Mvvm.EnumSourceHelper.GetEnumSource(GetType(DateTimeSavingMode))
            storageTimeZone.EditValue = TimeZoneInfo.FindSystemTimeZoneById("AUS Eastern Standard Time")
            AddHandler Loaded, AddressOf OnLoaded
            AddHandler scheduler.SelectedAppointments.CollectionChanged, AddressOf OnSelectedAppointmentsCollectionChanged
            AddHandler scheduler.AppointmentEdited, AddressOf OnAppointmentEdited
        End Sub

        Private Sub OnLoaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
            UpdateSchedulerDataSource()
        End Sub

        Private Sub OnSelectedAppointmentsCollectionChanged(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
            UpdateSelectedAppointmentInfo()
        End Sub

        Private Sub OnAppointmentEdited(ByVal sender As Object, ByVal e As AppointmentEditedEventArgs)
            UpdateSelectedAppointmentInfo()
        End Sub

        Private Sub OnDateTimeSavingModeEditValueChanged(ByVal sender As Object, ByVal e As DevExpress.Xpf.Editors.EditValueChangedEventArgs)
            UpdateSchedulerDataSource()
        End Sub

        Private Sub OnStorageTimeZoneEditValueChanged(ByVal sender As Object, ByVal e As DevExpress.Xpf.Editors.EditValueChangedEventArgs)
            UpdateSchedulerDataSource()
        End Sub

        Private Sub SelectFirstAppointment()
            scheduler.SelectedAppointments.Clear()
            Dim pattern = scheduler.AppointmentItems.FirstOrDefault(Function(x) x.Type = AppointmentType.Pattern)
            Dim occ = If(pattern IsNot Nothing, scheduler.GetOccurrenceOrException(pattern, 0), Nothing)
            scheduler.SelectedAppointments.Add(If(occ, scheduler.AppointmentItems.FirstOrDefault()))
        End Sub

        Private Sub UpdateSchedulerDataSource()
            If Not IsLoaded Then Return
            Dim dataSource = CType(DataSourceFactory.LoadContent(), DataSource)
            Dim mode = CType(dateTimeSavingMode.EditValue, DateTimeSavingMode)
            Dim storageTZ = CType(storageTimeZone.EditValue, TimeZoneInfo)
            dataSource.DateTimeSavingMode = mode
            Select Case mode
                Case DevExpress.XtraScheduler.DateTimeSavingMode.Appointment
                    dataSource.AppointmentsSource = VM.Appointments
                Case DevExpress.XtraScheduler.DateTimeSavingMode.Storage
                    VM.StorageTimeZone = storageTZ
                    dataSource.AppointmentsSource = VM.StorageAppointments
                    dataSource.TimeZone = storageTZ
                Case DevExpress.XtraScheduler.DateTimeSavingMode.Utc
                    dataSource.AppointmentsSource = VM.UtcAppointments
            End Select

            scheduler.DataSource = dataSource
            SelectFirstAppointment()
        End Sub

        Private Sub UpdateSelectedAppointmentInfo()
            aptInfo.Text = Nothing
            aptDbInfo.Text = Nothing
            Dim apt = scheduler.SelectedAppointments.FirstOrDefault()
            If apt Is Nothing Then
                Clear(aptInfo)
                Clear(aptDbInfo)
                Return
            End If

            If apt.Type = AppointmentType.Occurrence Then apt = scheduler.GetPattern(apt)
            Write(aptInfo, apt)
            Write(aptDbInfo, CType(apt.SourceObject, AppointmentEntity))
        End Sub

        Private Overloads Sub Clear(ByVal tb As TextBlock)
            WriteText(tb, "No Appointment Selected", False, True)
        End Sub

        Private Sub Write(ByVal tb As TextBlock, ByVal apt As AppointmentItem)
            If apt.AllDay Then
                WriteText(tb, Description_AppointmentItem_AllDay, False, True)
            Else
                WriteText(tb, String.Format(Description_AppointmentItem, TimeZoneOffsetToString(scheduler.TimeZone)), False, True)
            End If

            WriteNewLine(tb, True)
            Write(tb, apt.Type, apt.AllDay, apt.Start, apt.End, apt.QueryStart, apt.QueryEnd, apt.TimeZoneId, apt.RecurrenceInfo, apt.Reminder)
        End Sub

        Private Sub Write(ByVal tb As TextBlock, ByVal apt As AppointmentEntity)
            If apt.AllDay Then
                WriteText(tb, Description_AppointmentEntity_AllDay, False, True)
            Else
                Select Case scheduler.DataSource.DateTimeSavingMode
                    Case DevExpress.XtraScheduler.DateTimeSavingMode.Utc
                        WriteText(tb, Description_AppointmentEntity_UTC, False, True)
                    Case DevExpress.XtraScheduler.DateTimeSavingMode.Storage
                        WriteText(tb, String.Format(Description_AppointmentEntity_Storage, TimeZoneOffsetToString(scheduler.DataSource.TimeZone)), False, True)
                    Case DevExpress.XtraScheduler.DateTimeSavingMode.Appointment
                        WriteText(tb, String.Format(Description_AppointmentEntity_Appointment, TimeZoneOffsetToString(apt.TimeZoneId)), False, True)
                End Select
            End If

            WriteNewLine(tb, True)
            Dim aptType = CType(apt.AppointmentType, AppointmentType)
            Dim recInfo As IRecurrenceInfo = Nothing
            If aptType = AppointmentType.Pattern Then recInfo = RecurrenceInfoXmlPersistenceHelper.ObjectFromXml(apt.RecurrenceInfo)
            Dim reminder = ReminderXmlHelper.LoadFromXml(apt.ReminderInfo, Nothing, Nothing).FirstOrDefault()
            Write(tb, CType(apt.AppointmentType, AppointmentType), apt.AllDay, apt.Start, apt.End, apt.QueryStart, apt.QueryEnd, apt.TimeZoneId, recInfo, reminder)
        End Sub

        Private Sub Write(ByVal tb As TextBlock, ByVal type As AppointmentType, ByVal allDay As Boolean, ByVal start As Date, ByVal [end] As Date, ByVal queryStart As Date, ByVal queryEnd As Date, ByVal timeZone As String, ByVal recInfo As IRecurrenceInfo, ByVal reminder As ReminderItem)
            Write(tb, "Type: ", type, False)
            Write(tb, "AllDay: ", allDay)
            Write(tb, "Start: ", start)
            Write(tb, "End: ", [end])
            Write(tb, "QueryStart: ", queryStart)
            Write(tb, "QueryEnd: ", queryEnd)
            Write(tb, "TimeZone: ", TimeZoneToString(timeZone))
            If reminder IsNot Nothing Then
                Write(tb, "Reminder", Nothing)
                Write(tb, "    TimeBeforeStart: ", reminder.TimeBeforeStart)
                Write(tb, "    AlertTime: ", reminder.AlertTime)
            End If

            If type = AppointmentType.Pattern Then
                Write(tb, "RecurrenceInfo", Nothing)
                Write(tb, "    Type: ", recInfo.Type)
                Write(tb, "    Start: ", recInfo.Start)
                If recInfo.Range = RecurrenceRange.OccurrenceCount Then
                    Write(tb, "    OccurrenceCount: ", recInfo.OccurrenceCount)
                ElseIf recInfo.Range = RecurrenceRange.EndByDate Then
                    Write(tb, "    End: ", recInfo.End)
                End If
            End If
        End Sub

        Private Sub Write(ByVal tb As TextBlock, ByVal caption As String, ByVal value As Object, ByVal Optional newLine As Boolean = True)
            If newLine Then WriteNewLine(tb)
            WriteText(tb, caption, True, False)
            If value IsNot Nothing Then WriteText(tb, value.ToString(), False, False)
        End Sub

        Private Sub WriteText(ByVal tb As TextBlock, ByVal text As String, ByVal bold As Boolean, ByVal italic As Boolean)
            tb.Inlines.Add(New Run(text) With {.FontWeight = If(bold, FontWeights.Bold, FontWeights.Normal), .FontStyle = If(italic, FontStyles.Italic, FontStyles.Normal)})
        End Sub

        Private Sub WriteNewLine(ByVal tb As TextBlock, ByVal Optional bold As Boolean = False)
            tb.Inlines.Add(New LineBreak())
            If bold Then tb.Inlines.Add(New InlineUIContainer() With {.Child = New Border() With {.Height = 18}})
        End Sub

        Private Function TimeZoneToString(ByVal timeZone As String) As String
            Return TimeZoneToString(TimeZoneInfo.FindSystemTimeZoneById(timeZone))
        End Function

        Private Function TimeZoneToString(ByVal timeZone As TimeZoneInfo) As String
            Return timeZone.DisplayName
        End Function

        Private Function TimeZoneOffsetToString(ByVal timeZone As String) As String
            Return TimeZoneOffsetToString(TimeZoneInfo.FindSystemTimeZoneById(timeZone))
        End Function

        Private Function TimeZoneOffsetToString(ByVal timeZone As TimeZoneInfo) As String
            Dim offset = "UTC"
            If timeZone.BaseUtcOffset < TimeSpan.Zero Then
                offset += "-" & timeZone.BaseUtcOffset.ToString("hh\:mm")
            ElseIf timeZone.BaseUtcOffset > TimeSpan.Zero Then
                offset += "+" & timeZone.BaseUtcOffset.ToString("hh\:mm")
            End If

            Return offset
        End Function

        Const Description_AppointmentItem_AllDay As String = "All-day appointments span an entire day regardless of the time zone. The TimeZone property value indicates the time zone in which the AppointmentItem was created."

        Const Description_AppointmentItem As String = "DateTime values are in the scheduler's time zone: {0}. The TimeZone property indicates the time zone in which the AppointmentItem was created."

        Const Description_AppointmentEntity_AllDay As String = "DateTime values are in an unspecified time zone."

        Const Description_AppointmentEntity_UTC As String = "DateTime values are in the UTC time zone."

        Const Description_AppointmentEntity_Storage As String = "DateTime values are in the time zone specified by DataSource.TimeZone: {0}."

        Const Description_AppointmentEntity_Appointment As String = "DateTime values are in the AppointmentItem's time zone: {0}."
    End Class
End Namespace
