Imports System.Windows
Imports System.Windows.Controls
Imports DevExpress.Xpf.Charts
Imports DevExpress.Xpf.DemoBase

Namespace ChartsDemo

    <CodeFile("Modules/Highlighted/MvvmFinancialCharting.xaml"), CodeFile("Modules/Highlighted/MvvmFinancialCharting.xaml.(cs)"), CodeFile("Modules/Highlighted/MvvmFinancialChartingViewModel.(cs)"), CodeFile("DataModels/RealTimeFinancialDataGenerator.(cs)"), CodeFile("DataModels/FinancialDataPoint.(cs)"), NoAutogeneratedCodeFiles>
    Public Partial Class MvvmFinancialChartingDemo
        Inherits ChartsDemoModule

        Private ReadOnly Property ViewModel As MvvmFinancialChartingViewModel
            Get
                Return TryCast(DataContext, MvvmFinancialChartingViewModel)
            End Get
        End Property

        Public Overrides ReadOnly Property ModuleChartControl As ChartControl
            Get
                Return chart
            End Get
        End Property

        Public Sub New()
            InitializeComponent()
            AddHandler Unloaded, Sub(s, e) ViewModel.Unload()
        End Sub

        Private Sub BarCheckItem_CheckedChanged(ByVal sender As Object, ByVal e As DevExpress.Xpf.Bars.ItemClickEventArgs)
            If DrawTrendLineIndicator.IsChecked.GetValueOrDefault() OrElse DrawFibonacciArcsIndicatorItem.IsChecked.GetValueOrDefault() OrElse DrawFibonacciFansIndicatorItem.IsChecked.GetValueOrDefault() OrElse DrawFibonacciRetracementIndicatorItem.IsChecked.GetValueOrDefault() OrElse RemoveIndicatorItem.IsChecked.GetValueOrDefault() OrElse AddTextAnnotationItem.IsChecked.GetValueOrDefault() OrElse AddImageAnnotationItem.IsChecked.GetValueOrDefault() Then
                ViewModel.PauseTimer()
            Else
                ViewModel.ResumeTimer()
            End If
        End Sub

        Public Overrides Sub OnStartModule()
            ViewModel.ResumeTimer()
        End Sub

        Public Overrides Sub OnStopModule()
            ViewModel.PauseTimer()
        End Sub
    End Class

    Friend Class IndicatorTemplateSelector
        Inherits DataTemplateSelector

        Public Overrides Function SelectTemplate(ByVal item As Object, ByVal container As DependencyObject) As DataTemplate
            Dim indicatorItem As IndicatorItem = TryCast(item, IndicatorItem)
            Dim series As XYSeries2D = TryCast(container, XYSeries2D)
            If indicatorItem Is Nothing OrElse series Is Nothing Then Return Nothing
            Select Case indicatorItem.Type
                Case IndicatorType.BollingerBands
                    Return CType(series.TryFindResource("bollingerBandsDataTemplate"), DataTemplate)
                Case IndicatorType.CommodityChannelIndex
                    Return CType(series.TryFindResource("commodityChannelIndexDataTemplate"), DataTemplate)
                Case IndicatorType.WilliamsR
                    Return CType(series.TryFindResource("williamsRDataTemplate"), DataTemplate)
                Case Else
                    Return Nothing
            End Select
        End Function
    End Class
End Namespace
