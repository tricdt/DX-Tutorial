Imports System
Imports System.ComponentModel
Imports System.Windows
Imports System.Windows.Data
Imports System.Windows.Media
Imports DevExpress.Xpf.Charts
Imports DevExpress.Xpf.Core
Imports DevExpress.Xpf.DemoBase

Namespace ChartsDemo

    <CodeFile("Modules/Highlighted/LargeSeriesNumber.xaml"), CodeFile("Modules/Highlighted/LargeSeriesNumber.xaml.(cs)"), CodeFile("DataModels/SeaIceAreaDataReader.(cs)"), NoAutogeneratedCodeFiles>
    Public Partial Class LargeSeriesNumberDemo
        Inherits ChartsDemoModule

        Public Shared ReadOnly ChartPaletteProperty As DependencyProperty = DependencyProperty.Register("ChartPalette", GetType(Palette), GetType(LargeSeriesNumberDemo), New PropertyMetadata(AddressOf OnChartPaletteChanged))

        Private Shared Sub OnChartPaletteChanged(ByVal d As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim demo As LargeSeriesNumberDemo = TryCast(d, LargeSeriesNumberDemo)
            If demo IsNot Nothing Then demo.ColorizeSeries()
        End Sub

        Const UngrouppedSeriesCount As Integer = 11

        Private othersSeriesIndex As Integer

        Private ReadOnly Property SeriesCollection As SeriesCollection
            Get
                Return chart.Diagram.Series
            End Get
        End Property

        Public Property ChartPalette As Palette
            Get
                Return CType(GetValue(ChartPaletteProperty), Palette)
            End Get

            Set(ByVal value As Palette)
                SetValue(ChartPaletteProperty, value)
            End Set
        End Property

        Public Sub New()
            InitializeComponent()
            Dim myBinding As Binding = New Binding("Palette")
            myBinding.Source = chart
            myBinding.Mode = BindingMode.OneWay
            SetBinding(ChartPaletteProperty, myBinding)
        End Sub

        Private Sub OnApplicationThemeChanged(ByVal sender As DependencyObject, ByVal e As ThemeChangedRoutedEventArgs)
            ColorizeSeries()
        End Sub

        Private Sub chart_BoundDataChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
            If SeriesCollection.Count = 0 Then Return
            Dim seriesCount As Integer = SeriesCollection.Count
            othersSeriesIndex = seriesCount - UngrouppedSeriesCount
            ColorizeSeries()
            For i As Integer = 0 To seriesCount - 1
                Dim lineSeries As LineSeries2D = CType(SeriesCollection(i), LineSeries2D)
                Dim descriptor As DependencyPropertyDescriptor = DependencyPropertyDescriptor.FromProperty(Series.CheckedInLegendProperty, GetType(Series))
                descriptor.AddValueChanged(lineSeries, New EventHandler(AddressOf OnCheckedInLegendChanged))
                If i < othersSeriesIndex Then
                    SeriesCollection(i).ShowInLegend = False
                ElseIf i = othersSeriesIndex Then
                    lineSeries.LegendTextPattern = "Others"
                ElseIf i = SeriesCollection.Count - 1 Then
                    If lineSeries IsNot Nothing Then
                        If lineSeries.LineStyle IsNot Nothing Then lineSeries.LineStyle.Thickness = 5
                        lineSeries.FirstPoint = New SidePoint() With {.LabelDisplayMode = SidePointDisplayMode.SeriesPoint}
                        lineSeries.FirstPoint.Label = New SeriesLabel() With {.TextPattern = "{V:0.000M km²}"}
                        lineSeries.LastPoint = New SidePoint() With {.LabelDisplayMode = SidePointDisplayMode.SeriesPoint}
                        lineSeries.LastPoint.Label = New SeriesLabel() With {.TextPattern = "{V:0.000M km²}"}
                        lineSeries.ActualLabel.TextPattern = "{FullDate:MM/dd/yyyy}" & Microsoft.VisualBasic.Constants.vbLf & "{V:0.000M km²}"
                    End If
                End If
            Next
        End Sub

        Private Sub ColorizeSeries()
            Dim seriesCount As Integer = SeriesCollection.Count
            If ChartPalette Is Nothing Then Return
            Dim color As Color = ChartPalette(0)
            For i As Integer = 0 To seriesCount - 1
                Dim series As LineSeries2D = CType(SeriesCollection(i), LineSeries2D)
                Dim seriesColor As Color = ColorizeSeaIceSeries(color, seriesCount - i, ApplicationThemeHelper.ApplicationThemeName)
                Dim brush As SolidColorBrush = New SolidColorBrush(seriesColor)
                brush.Freeze()
                series.Brush = brush
            Next
        End Sub

        Private Sub OnCheckedInLegendChanged(ByVal sender As Object, ByVal e As EventArgs)
            Dim series As LineSeries2D = TryCast(sender, LineSeries2D)
            If series Is Nothing OrElse SeriesCollection.IndexOf(series) <> othersSeriesIndex Then Return
            For i As Integer = 0 To SeriesCollection.Count - 1
                If i < othersSeriesIndex Then SeriesCollection(i).Visible = series.CheckedInLegend
            Next
        End Sub

        Private Overloads Sub ChartsDemoModule_ModuleLoaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
            AddHandler ThemeManager.ApplicationThemeChanged, AddressOf OnApplicationThemeChanged
        End Sub

        Private Sub ChartsDemoModule_ModuleUnloaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
            RemoveHandler ThemeManager.ApplicationThemeChanged, AddressOf OnApplicationThemeChanged
            For Each series As Series In SeriesCollection
                Dim descriptor As DependencyPropertyDescriptor = DependencyPropertyDescriptor.FromProperty(Series.CheckedInLegendProperty, GetType(Series))
                descriptor.RemoveValueChanged(series, New EventHandler(AddressOf OnCheckedInLegendChanged))
            Next
        End Sub
    End Class
End Namespace
