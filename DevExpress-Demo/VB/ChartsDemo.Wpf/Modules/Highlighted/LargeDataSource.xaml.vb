Imports DevExpress.Xpf.Charts
Imports DevExpress.Xpf.DemoBase
Imports System
Imports System.Collections.Generic
Imports System.Runtime
Imports System.Windows
Imports System.Windows.Threading

Namespace ChartsDemo

    <CodeFile("Modules/Highlighted/LargeDataSource.xaml")>
    <CodeFile("Modules/Highlighted/LargeDataSource.xaml.(cs)")>
    <CodeFile("DataModels/SimpleDataPoint.(cs)")>
    <NoAutogeneratedCodeFiles>
    Public Partial Class LargeDataSourceDemo
        Inherits ChartsDemoModule

        Const InitialPointsCount As Integer = 2500000

        Public Shared ReadOnly DisplayDiagnosticControlsProperty As DependencyProperty = DependencyProperty.Register("DisplayDiagnosticControls", GetType(Boolean), GetType(LargeDataSourceDemo), New PropertyMetadata(False))

        Private seriesIndex As Integer = 1

        Private totalPointsCount As Integer = 0

        Public Sub New()
            InitializeComponent()
#If DEBUG
            DisplayDiagnosticControls = True
#End If
            DataContext = Me
            totalPointsCount = 0
            InitializeSeries(InitialPointsCount)
        End Sub

        Private Sub InitializeSeries(ByVal pointsCount As Integer)
            ExecuteIdle(New Action(Of Integer)(AddressOf PerformAddSeries), pointsCount)
        End Sub

        Private Sub AddSeries(ByVal pointsCount As Integer)
            ShowLoadingPanel()
            ExecuteIdle(New Action(Of Integer)(AddressOf PerformAddSeries), pointsCount)
            ExecuteIdle(New Action(AddressOf HideLoadingPanel))
        End Sub

        Private Sub btnAdd1MPoints_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
            AddSeries(1000000)
        End Sub

        Private Sub btnAdd250KPoints_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
            AddSeries(250000)
        End Sub

        Private Sub btnAdd500KPoints_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
            AddSeries(500000)
        End Sub

        Private Sub btnClear_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
            Dim series = New List(Of Series)(xyDiagram.Series)
            xyDiagram.Series.Clear()
            series.ForEach(Sub(s) s.DataSource = Nothing)
            totalPointsCount = 0
            pointCountTitle.Content = String.Format("Total Points Count: {0:#,0.}", totalPointsCount)
        End Sub

        Private Sub ExecuteIdle(ByVal operation As Action)
            Dispatcher.BeginInvoke(operation, DispatcherPriority.Background)
        End Sub

        Private Sub ExecuteIdle(ByVal operation As Action(Of Integer), ByVal parameter As Integer)
            Dispatcher.BeginInvoke(operation, DispatcherPriority.Background, parameter)
        End Sub

        Private Sub HideLoadingPanel()
            loadingDecorator.IsSplashScreenShown = False
        End Sub

        Private Sub PerformAddSeries(ByVal pointsCount As Integer)
            Try
                Dim asmSuffix As String = GetType(LineSeries2D).AssemblyQualifiedName
                asmSuffix = asmSuffix.Substring(asmSuffix.IndexOf(","))
                Dim type = GetType(LineSeries2D)
                Dim series As XYSeries2D = CType(Activator.CreateInstance(type), XYSeries2D)
                series.DisplayName = String.Format("Series {0}", seriesIndex)
                seriesIndex += 1
                series.ArgumentDataMember = "Argument"
                series.ValueDataMember = "Value"
                series.AllowResample = True
                series.DataSource = GenerateSeriesDataSource(pointsCount)
                xyDiagram.Series.Add(series)
                totalPointsCount += pointsCount
                pointCountTitle.Content = String.Format("Total Points Count: {0:#,0.}", totalPointsCount)
            Catch __unusedOutOfMemoryException1__ As OutOfMemoryException
                btnClear_Click(Nothing, Nothing)
                GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce
                GC.Collect(2, GCCollectionMode.Forced)
                GC.WaitForFullGCComplete()
                PerformAddSeries(pointsCount)
            End Try
        End Sub

        Private Sub ShowLoadingPanel()
            loadingDecorator.IsSplashScreenShown = True
        End Sub

        Public Property DisplayDiagnosticControls As Boolean
            Get
                Return CBool(GetValue(DisplayDiagnosticControlsProperty))
            End Get

            Set(ByVal value As Boolean)
                SetValue(DisplayDiagnosticControlsProperty, value)
            End Set
        End Property
    End Class
End Namespace
