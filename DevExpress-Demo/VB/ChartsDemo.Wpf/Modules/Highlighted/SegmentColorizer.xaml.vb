Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Globalization
Imports System.Windows.Data
Imports System.Windows.Markup
Imports System.Windows.Media
Imports System.Xml.Serialization
Imports DevExpress.Xpf.Charts
Imports DevExpress.Xpf.DemoBase

Namespace ChartsDemo

    <CodeFile("Modules/Highlighted/SegmentColorizer.xaml"), CodeFile("Modules/Highlighted/SegmentColorizer.xaml.(cs)"), CodeFile("DataModels/RealEstateData.(cs)"), NoAutogeneratedCodeFiles>
    Public Partial Class SegmentColorizerDemo
        Inherits ChartsDemoModule

        Public Sub New()
            InitializeComponent()
            DataContext = DailyWeather.Load()
        End Sub
    End Class

    <XmlRoot("DailyWeather")>
    Public Class DailyWeather
        Inherits List(Of Weather)
        Implements INotifyPropertyChanged

        Public Shared ReadOnly CelsiusRangeStops As DoubleCollection = New DoubleCollection() From {-40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30}

        Public Shared ReadOnly FahrenheitRangeStops As DoubleCollection = New DoubleCollection() From {-40, -31, -22, -13, -4, 5, 14, 23, 32, 41, 50, 59, 68, 77, 86}

        Public Shared Function Load() As DailyWeather
            Dim serializer As XmlSerializer = XmlSerializer.FromTypes({GetType(DailyWeather)})(0)
            Dim dailyWeather = CType(serializer.Deserialize(LoadFromResources("/Data/CityWeather.xml")), DailyWeather)
            For Each weather In dailyWeather
                weather.Date = New DateTime(Date.Now.Year - 1, weather.Date.Month, weather.Date.Day)
            Next

            Return dailyWeather
        End Function

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Private actualTemperatureRangesField As DoubleCollection = FahrenheitRangeStops

        Public Property ActualTemperatureRanges As DoubleCollection
            Get
                Return actualTemperatureRangesField
            End Get

            Set(ByVal value As DoubleCollection)
                actualTemperatureRangesField = value
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("ActualTemperatureRanges"))
            End Set
        End Property
    End Class

    Public Class Weather

        Public Property [Date] As Date

        Public Property Celsius As Double

        Public Property Fahrenheit As Double
    End Class

    Public Class DoubleCollectionToStringConverterConverter
        Inherits MarkupExtension
        Implements IValueConverter

        Const Fahrenheit As String = "Fahrenheit"

        Const Celsius As String = "Celsius"

        Private Function Convert(ByVal values As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object Implements IValueConverter.Convert
            If values Is DailyWeather.FahrenheitRangeStops Then
                Return Fahrenheit
            Else
                Return Celsius
            End If
        End Function

        Private Function ConvertBack(ByVal value As Object, ByVal targetTypes As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object Implements IValueConverter.ConvertBack
            If Equals(value.ToString(), Fahrenheit) Then
                Return DailyWeather.FahrenheitRangeStops
            Else
                Return DailyWeather.CelsiusRangeStops
            End If
        End Function

        Public Overrides Function ProvideValue(ByVal serviceProvider As IServiceProvider) As Object
            Return Me
        End Function
    End Class

    Public Class MonthKeyProvider
        Inherits MarkupExtension
        Implements IColorizerKeyProvider

        Private ReadOnly cultureInfo As CultureInfo = CultureInfo.CreateSpecificCulture("en-US")

        Private Function GetKey(ByVal item As Object) As Object Implements IColorizerKeyProvider.GetKey
            Return String.Format(cultureInfo, "{0:MMMM}", item)
        End Function

        Public Overrides Function ProvideValue(ByVal serviceProvider As IServiceProvider) As Object
            Return Me
        End Function
    End Class
End Namespace
