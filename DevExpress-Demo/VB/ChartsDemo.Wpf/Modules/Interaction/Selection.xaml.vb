Imports System
Imports System.Globalization
Imports System.Linq
Imports System.Windows
Imports System.Windows.Data
Imports System.Windows.Markup
Imports System.Windows.Media
Imports DevExpress.Mvvm.UI.Interactivity
Imports DevExpress.Xpf.Charts
Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.Map

Namespace ChartsDemo

    <CodeFile("Modules/Interaction/Selection.xaml"), CodeFile("Modules/Interaction/Selection.xaml.(cs)"), CodeFile("Modules/Interaction/SelectionViewModel.(cs)"), CodeFile("DataModels/CountriesData.(cs)"), NoAutogeneratedCodeFiles>
    Public Partial Class SelectionDemo
        Inherits ChartsDemoModule

        Public Sub New()
            InitializeComponent()
        End Sub
    End Class

    Public Class SelectedItemNameBindingBehavior
        Inherits Behavior(Of VectorLayer)

        Public Shared ReadOnly SelectedItemNameProperty As DependencyProperty = DependencyProperty.Register("SelectedItemName", GetType(String), GetType(SelectedItemNameBindingBehavior), New PropertyMetadata(Nothing, Sub(d, e) CType(d, SelectedItemNameBindingBehavior).OnSelectedItemNameChanged()))

        Public Property SelectedItemName As String
            Get
                Return CStr(GetValue(SelectedItemNameProperty))
            End Get

            Set(ByVal value As String)
                SetValue(SelectedItemNameProperty, value)
            End Set
        End Property

        Protected Overrides Sub OnAttached()
            MyBase.OnAttached()
            AddHandler AssociatedObject.Map.SelectionChanged, AddressOf MapSelectionChanged
            AddHandler AssociatedObject.DataLoaded, Sub(_d, _e) OnSelectedItemNameChanged()
        End Sub

        Private Shared Function GetName(ByVal mapItem As MapItem) As String
            Return If(mapItem IsNot Nothing AndAlso mapItem.Attributes("NAME") IsNot Nothing, CStr(mapItem.Attributes("NAME").Value), String.Empty)
        End Function

        Private Sub MapSelectionChanged(ByVal sender As Object, ByVal e As MapItemSelectionChangedEventArgs)
            SelectedItemName = GetName(CType(e.Selection.FirstOrDefault(), MapItem))
        End Sub

        Private Sub OnSelectedItemNameChanged()
            If AssociatedObject IsNot Nothing AndAlso AssociatedObject.Data IsNot Nothing AndAlso AssociatedObject.Data.DisplayItems.Any() Then AssociatedObject.SelectedItem = AssociatedObject.Data.DisplayItems.FirstOrDefault(Function(x) Equals(GetName(x), SelectedItemName))
        End Sub
    End Class

    Friend Class ChartPaletteToMapColorsConverter
        Inherits ForwardOnlyValueConverter

        Public Overrides Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object
            Dim chartColors As Palette = CType(value, Palette)
            Dim rangeStops As DoubleCollection = CType(parameter, DoubleCollection)
            Dim colorsCount As Integer = CInt(rangeStops(rangeStops.Count - 1) - rangeStops(0)) + 1
            Dim mapColors As DevExpress.Xpf.Map.ColorCollection = New DevExpress.Xpf.Map.ColorCollection()
            For i As Integer = 0 To colorsCount - 1
                mapColors.Add(chartColors(i))
            Next

            Return mapColors
        End Function
    End Class

    Friend Class SelectedIndexToBrushConverter
        Inherits MarkupExtension
        Implements IMultiValueConverter

        Public Function Convert(ByVal values As Object(), ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object Implements IMultiValueConverter.Convert
            If values(0).GetType() IsNot GetType(Integer) OrElse CInt(values(0)) < 0 OrElse Not(TypeOf values(1) Is Palette) Then Return Nothing
            Dim index As Integer = CInt(values(0))
            Dim palette As Palette = CType(values(1), Palette)
            Dim brush As SolidColorBrush = New SolidColorBrush(palette(index))
            brush.Freeze()
            Return brush
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetTypes As Type(), ByVal parameter As Object, ByVal culture As CultureInfo) As Object() Implements IMultiValueConverter.ConvertBack
            Return Nothing
        End Function

        Public Overrides Function ProvideValue(ByVal serviceProvider As IServiceProvider) As Object
            Return Me
        End Function
    End Class
End Namespace
