Imports System
Imports System.Linq
Imports System.Windows
Imports System.Windows.Threading
Imports DevExpress.Xpf.Charts
Imports DevExpress.Xpf.DemoBase

Namespace ChartsDemo

    <CodeFile("Modules/Interaction/Animation.xaml"), CodeFile("Modules/Interaction/Animation.xaml.(cs)"), CodeFile("Modules/Interaction/AnimationHelper.(cs)"), CodeFile("Modules/SeriesInfo.(cs)"), CodeFile("DataModels/AnimationDemoDataSources.(cs)"), NoAutogeneratedCodeFiles>
    Public Partial Class AnimationDemo
        Inherits ChartsDemoModule

        Public Sub New()
            InitializeComponent()
            Dispatcher.BeginInvoke(New Action(AddressOf OnSeriesTemplateChanged), DispatcherPriority.Background)
            Dispatcher.BeginInvoke(New Action(AddressOf chart.Animate), DispatcherPriority.ApplicationIdle)
        End Sub

        Private Sub SeriesTemplateChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
            Dispatcher.BeginInvoke(New Action(AddressOf OnSeriesTemplateChanged), DispatcherPriority.Background)
        End Sub

        Private Sub OnSeriesTemplateChanged()
            Dim firstSeries = chart.Diagram.Series.FirstOrDefault()
            If firstSeries Is Nothing Then Return
            If TypeOf firstSeries Is RangeBarOverlappedSeries2D Then
                CType(Enumerable.Last(chart.Diagram.Series), RangeBarOverlappedSeries2D).BarWidth = 0.2
            End If

            If TypeOf firstSeries Is ISupportStackedGroup Then
                For i As Integer = 0 To chart.Diagram.Series.Count - 1
                    CType(chart.Diagram.Series(i), ISupportStackedGroup).StackedGroup = i Mod 2
                Next
            End If

            InitializeAnimationListBoxEdit(lbPointAnimation, firstSeries.GetPredefinedPointAnimationKinds(), GetDefaultPointAnimationType(firstSeries))
            InitializeAnimationListBoxEdit(lbSeriesAnimation, firstSeries.GetPredefinedSeriesAnimationKinds(), GetDefaultSeriesAnimationType(firstSeries))
            If IsModuleLoaded Then chart.Animate()
        End Sub

        Private Sub AnimationKindChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
            If chart.Diagram Is Nothing Then Return
            For i As Integer = 0 To chart.Diagram.Series.Count - 1
                Dim series = chart.Diagram.Series(i)
                Dim seriesAnimation = CreateSeriesAnimation(CType(lbSeriesAnimation.SelectedItem, AnimationKind), i)
                Dim pointAnimation = CreatePointAnimation(CType(lbPointAnimation.SelectedItem, AnimationKind), seriesAnimation, i)
                series.SetSeriesAnimation(seriesAnimation)
                series.SetPointAnimation(pointAnimation)
            Next

            If IsModuleLoaded Then chart.Animate()
        End Sub
    End Class
End Namespace
