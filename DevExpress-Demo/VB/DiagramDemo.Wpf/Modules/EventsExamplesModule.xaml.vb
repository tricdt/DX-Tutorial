Imports DevExpress.Mvvm
Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.DemoBase.Helpers
Imports DevExpress.Xpf.DemoBase.Helpers.TextColorizer
Imports System
Imports System.Diagnostics
Imports System.Linq
Imports System.Windows
Imports System.Windows.Controls
Imports System.Reflection
Imports System.Windows.Data

Namespace DiagramDemo

    <NoAutogeneratedCodeFiles>
    Public Partial Class EventsExamplesModule
        Inherits DiagramDemoModule

        Public Sub New()
            InitializeComponent()
            Dim showcases As ShowcaseInfo() = CreateShowcases()
            Dim showcasesView = CType(Resources("showcasesView"), CollectionViewSource)
            showcasesView.Source = showcases
            tabControl.SelectedIndex = If(DemoHelper.GetDemoLanguage(GetType(EventsExamplesModule).Assembly) = CodeLanguage.VB, 1, 0)
        End Sub

        Private Function CreateShowcases() As ShowcaseInfo()
            Const path As String = "Modules/EventsExamples"
            Return New ShowcaseInfo() {LoadShowcase("Prohibiting actions", "Prohibiting actions 1", path, GetType(ProhibitingActions1Example)), LoadShowcase("Prohibiting actions", "Prohibiting actions 2", path, GetType(ProhibitingActions2Example)), LoadShowcase("Constraining actions", "Max width", path, GetType(MaxWidthExample)), LoadShowcase("Constraining actions", "90-degree-only-rotatable item", path, GetType(NinetyDegreeOnlyRotatableItemExample)), LoadShowcase("Constraining actions", "Restricted part of the canvas", path, GetType(RestrictedPartOfTheCanvasExample)), LoadShowcase("Constraining actions", "Draw circle", path, GetType(DrawCircleExample)), LoadShowcase("Notifications", "Moving feedback and confirmation message", path, GetType(FeedbackAndConfirmationMessageExample)), LoadShowcase("Notifications", "Item bounds changed", path, GetType(ItemBoundsChangedExample)), LoadShowcase("Notifications", "Expand container by dragging an item over it", path, GetType(ExpandContainerOnDragOver)), LoadShowcase("Connectors", "Categorized connectors", path, GetType(CategorizedConnectorsExample)), LoadShowcase("Connectors", "Confirmation message", path, GetType(ConfirmationMessageExample))}
        End Function

        Private Shared Function LoadShowcase(ByVal group As String, ByVal name As String, ByVal path As String, ByVal exampleType As Type) As ShowcaseInfo
            Return New ShowcaseInfo(group, name, exampleType, LoadCode(path, exampleType, CodeLanguage.CS), LoadCode(path, exampleType, CodeLanguage.VB))
        End Function

        Private Shared Function LoadCode(ByVal path As String, ByVal exampleType As Type, ByVal language As CodeLanguage) As CodeLanguageText
            Return New CodeLanguageText(language, Function() Prepare(DemoCodeHelper.LoadSourceCode(path, exampleType, language)))
        End Function

        Private Shared Function Prepare(ByVal codeText As String) As String
            If String.IsNullOrEmpty(codeText) Then Return String.Empty
            Const exampleStart As String = "Code Example Start"
            Const exampleEnd As String = "Code Example End"
            Dim lines = codeText.Split({Environment.NewLine}, StringSplitOptions.None).SkipWhile(Function(x) Not x.Contains(exampleStart)).Skip(1).TakeWhile(Function(x) Not x.Contains(exampleEnd)).ToArray()
            Dim padding = lines(0).TakeWhile(Function(x) x = " "c).Count()
            Return String.Join(Environment.NewLine, lines.[Select](Function(x) x.Substring(Math.Min(padding, x.Length))).ToArray())
        End Function
    End Class

    Public Class ShowcaseInfo
        Inherits BindableBase

        Private _Group As String, _Name As String, _ExampleType As Type, _CSCodeText As CodeLanguageText, _VBCodeText As CodeLanguageText

        Public Sub New(ByVal group As String, ByVal name As String, ByVal exampleType As Type, ByVal csCodeText As CodeLanguageText, ByVal vbCodeText As CodeLanguageText)
            Me.Group = group
            Me.Name = name
            Me.ExampleType = exampleType
            Me.CSCodeText = csCodeText
            Me.VBCodeText = vbCodeText
        End Sub

        Public Property Group As String
            Get
                Return _Group
            End Get

            Private Set(ByVal value As String)
                _Group = value
            End Set
        End Property

        Public Property Name As String
            Get
                Return _Name
            End Get

            Private Set(ByVal value As String)
                _Name = value
            End Set
        End Property

        Public Property ExampleType As Type
            Get
                Return _ExampleType
            End Get

            Private Set(ByVal value As Type)
                _ExampleType = value
            End Set
        End Property

        Public Property CSCodeText As CodeLanguageText
            Get
                Return _CSCodeText
            End Get

            Private Set(ByVal value As CodeLanguageText)
                _CSCodeText = value
            End Set
        End Property

        Public Property VBCodeText As CodeLanguageText
            Get
                Return _VBCodeText
            End Get

            Private Set(ByVal value As CodeLanguageText)
                _VBCodeText = value
            End Set
        End Property

        Public Function Run() As FrameworkElement
            Return CType(ExampleType.GetMethod("Run", BindingFlags.Public Or BindingFlags.Static).Invoke(Nothing, New Object() {}), FrameworkElement)
        End Function
    End Class
End Namespace
