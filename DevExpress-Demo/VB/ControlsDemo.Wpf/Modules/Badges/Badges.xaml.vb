Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Globalization
Imports System.Linq
Imports System.Windows.Data
Imports System.Windows.Markup
Imports DevExpress.Mvvm
Imports DevExpress.Mvvm.Native
Imports DevExpress.Mvvm.UI.Interactivity
Imports DevExpress.Xpf.Core
Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.DemoBase.Helpers
Imports DevExpress.Xpf.RichEdit

Namespace ControlsDemo

    <NoAutogeneratedCodeFiles, CodeFiles("Modules/Badges/Badges.xaml", "Modules/Badges/Badges.xaml.(cs)")>
    Public Partial Class Badges

        Private Property ViewModel As BadgesDemoViewModel

        Public Sub New()
            ViewModel = New BadgesDemoViewModel()
            DataContext = ViewModel
            InitializeComponent()
        End Sub

        Protected Overrides Sub ShowPopupContent()
            MyBase.ShowPopupContent()
            ViewModel.ShowBadges = True
        End Sub

        Protected Overrides Sub HidePopupContent()
            MyBase.HidePopupContent()
            ViewModel.ShowBadges = False
        End Sub
    End Class

    Public Class BadgesDemoViewModel
        Inherits BindableBase

        Private _ShowBadgesCommand As DelegateCommand, _HideBadgesCommand As DelegateCommand

        Public Sub New()
            RecentMessages = MailItems.Messages.GroupBy(Function(x) x.Employee).[Select](Function(x) New EmployeeMessages(x.Key, x.OrderByDescending(Function(m) m.Received).ToArray())).OrderByDescending(Function(x) x.Messages(0).Received).ToList()
            SelectedMessages = RecentMessages.OrderByDescending(Function(x) x.UrgentMessagesCount).FirstOrDefault()
            UnreadMessageCount = RecentMessages.SelectMany(Function(x) x.Messages).Count(Function(x) Not x.Read)
            ReadMessageCount = RecentMessages.SelectMany(Function(x) x.Messages).Count(Function(x) x.Read)
            ShowBadgesCommand = New DelegateCommand(Sub() ShowBadges = True, Function() Not ShowBadges, False)
            HideBadgesCommand = New DelegateCommand(Sub() ShowBadges = False, Function() ShowBadges, False)
        End Sub

        Public Property RecentMessages As List(Of EmployeeMessages)

        Public Property UnreadMessageCount As Integer

        Public Property ReadMessageCount As Integer

        Public Property ShowBadgesCommand As DelegateCommand
            Get
                Return _ShowBadgesCommand
            End Get

            Private Set(ByVal value As DelegateCommand)
                _ShowBadgesCommand = value
            End Set
        End Property

        Public Property HideBadgesCommand As DelegateCommand
            Get
                Return _HideBadgesCommand
            End Get

            Private Set(ByVal value As DelegateCommand)
                _HideBadgesCommand = value
            End Set
        End Property

        Public Property SelectedMessages As EmployeeMessages
            Get
                Return GetValue(Of EmployeeMessages)()
            End Get

            Set(ByVal value As EmployeeMessages)
                SetValue(value)
            End Set
        End Property

        Public Property ShowBadges As Boolean
            Get
                Return GetValue(Of Boolean)()
            End Get

            Set(ByVal value As Boolean)
                SetValue(value, New Action(AddressOf OnShowBadgesChanged))
            End Set
        End Property

        Private Sub OnShowBadgesChanged()
            ShowBadgesCommand.RaiseCanExecuteChanged()
            HideBadgesCommand.RaiseCanExecuteChanged()
        End Sub
    End Class

    Public Class MailEmployeeStatusToBadgeKindConverterExtension
        Inherits MarkupExtension
        Implements IValueConverter

        Public Overrides Function ProvideValue(ByVal serviceProvider As IServiceProvider) As Object
            Return Me
        End Function

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object Implements IValueConverter.Convert
            Dim status = CType(value, MailEmployeeStatus)
            Select Case status
                Case MailEmployeeStatus.Available
                    Return BadgeKind.Success
                Case MailEmployeeStatus.Away
                    Return BadgeKind.Warning
                Case MailEmployeeStatus.Busy
                    Return BadgeKind.Error
                Case Else
                    Throw New ArgumentOutOfRangeException()
            End Select
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object Implements IValueConverter.ConvertBack
            Throw New NotImplementedException()
        End Function
    End Class

    Public Class StringCustomFormatterExtension
        Inherits MarkupExtension
        Implements IFormatProvider, ICustomFormatter

        Public Overrides Function ProvideValue(ByVal serviceProvider As IServiceProvider) As Object
            Return Me
        End Function

        Public Function GetFormat(ByVal formatType As Type) As Object Implements IFormatProvider.GetFormat
            If formatType Is GetType(ICustomFormatter) Then Return Me
            Return Nothing
        End Function

        Public Function Format(ByVal pFormat As String, ByVal arg As Object, ByVal formatProvider As IFormatProvider) As String Implements ICustomFormatter.Format
            Dim strArg = Convert.ToString(arg)
            pFormat = pFormat.ToUpper()
            Select Case pFormat
                Case "U"
                    Return strArg.ToUpper()
                Case "L"
                    Return strArg.ToLower()
                Case Else
                    Return strArg
            End Select
        End Function
    End Class

    Public Class AdjustRichEditColorsBehavior
        Inherits Behavior(Of RichEditControl)

        Protected Overrides Sub OnAttached()
            MyBase.OnAttached()
            AddHandler AssociatedObject.ActiveViewChanged, AddressOf OnActiveViewChanged
        End Sub

        Protected Overrides Sub OnDetaching()
            RemoveHandler AssociatedObject.ActiveViewChanged, AddressOf OnActiveViewChanged
            MyBase.OnDetaching()
        End Sub

        Private Sub OnActiveViewChanged(ByVal sender As Object, ByVal e As EventArgs)
            If AssociatedObject.ActiveView IsNot Nothing Then AssociatedObject.ActiveView.AdjustColorsToSkins = True
        End Sub
    End Class
End Namespace
