using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Markup;
using DevExpress.Dialogs.Core.View;
using DevExpress.Mvvm;
using DevExpress.Mvvm.Native;
using DevExpress.Mvvm.UI.Interactivity;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Core.Native;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.DemoBase.Helpers;
using DevExpress.Xpf.RichEdit;

namespace ControlsDemo {
    [NoAutogeneratedCodeFiles, CodeFiles("Modules/Badges/Badges.xaml", "Modules/Badges/Badges.xaml.(cs)")]
    public partial class Badges {
        BadgesDemoViewModel ViewModel { get; set; }
        public Badges() {
            ViewModel = new BadgesDemoViewModel();
            DataContext = ViewModel;            

            InitializeComponent();
        }
        protected override void ShowPopupContent() {
            base.ShowPopupContent();
            ViewModel.ShowBadges = true;
        }
        protected override void HidePopupContent() {
            base.HidePopupContent();
            ViewModel.ShowBadges = false;
        }
    }

    public class BadgesDemoViewModel : BindableBase {
        public BadgesDemoViewModel() {
            RecentMessages = MailItems.Messages.GroupBy(x => x.Employee).Select(x => new EmployeeMessages(x.Key, x.OrderByDescending(m => m.Received).ToArray())).OrderByDescending(x=>x.Messages[0].Received).ToList();
            SelectedMessages = RecentMessages.OrderByDescending(x => x.UrgentMessagesCount).FirstOrDefault();
            UnreadMessageCount = RecentMessages.SelectMany(x => x.Messages).Count(x => !x.Read);
            ReadMessageCount = RecentMessages.SelectMany(x => x.Messages).Count(x => x.Read);
            ShowBadgesCommand = new DelegateCommand(() => ShowBadges = true, () => !ShowBadges, false);
            HideBadgesCommand = new DelegateCommand(() => ShowBadges = false, () => ShowBadges, false);
        }
        public List<EmployeeMessages> RecentMessages { get; set; }
        public int UnreadMessageCount { get; set; }
        public int ReadMessageCount { get; set; }
        public DelegateCommand ShowBadgesCommand { get; private set; }
        public DelegateCommand HideBadgesCommand { get; private set; }
        public EmployeeMessages SelectedMessages {
            get { return GetValue<EmployeeMessages>(); }
            set { SetValue(value); }
        }
        public bool ShowBadges {
            get { return GetValue<bool>(); }
            set { SetValue(value, OnShowBadgesChanged); }
        }
        void OnShowBadgesChanged() {
            ShowBadgesCommand.RaiseCanExecuteChanged();
            HideBadgesCommand.RaiseCanExecuteChanged();
        }
    }

    public class MailEmployeeStatusToBadgeKindConverterExtension : MarkupExtension, IValueConverter {
        public override object ProvideValue(IServiceProvider serviceProvider) {
            return this;
        }
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
            var status = (MailEmployeeStatus)value;
            switch (status) {
                case MailEmployeeStatus.Available:
                    return BadgeKind.Success;
                case MailEmployeeStatus.Away:
                    return BadgeKind.Warning;
                case MailEmployeeStatus.Busy:
                    return BadgeKind.Error;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
            throw new NotImplementedException();
        }
    }

    public class StringCustomFormatterExtension : MarkupExtension, IFormatProvider, ICustomFormatter {
        public override object ProvideValue(IServiceProvider serviceProvider) {
            return this;
        }
        public object GetFormat(Type formatType) {
            if (formatType == typeof(ICustomFormatter))
                return this;
            return null;
        }
        public string Format(string format, object arg, IFormatProvider formatProvider) {
            var strArg = Convert.ToString(arg);
            format = format.ToUpper();

            switch (format) {
                case "U":
                    return strArg.ToUpper();
                case "L":
                    return strArg.ToLower();
                default:
                    return strArg;
            }
        }
    }

    public class AdjustRichEditColorsBehavior : Behavior<RichEditControl> {
        protected override void OnAttached() {
            base.OnAttached();
            AssociatedObject.ActiveViewChanged += OnActiveViewChanged;
        }
        protected override void OnDetaching() {
            AssociatedObject.ActiveViewChanged -= OnActiveViewChanged;
            base.OnDetaching();
        }
        
        void OnActiveViewChanged(object sender, EventArgs e) {
            if (AssociatedObject.ActiveView != null)
                AssociatedObject.ActiveView.AdjustColorsToSkins = true;
        }
    }
}
