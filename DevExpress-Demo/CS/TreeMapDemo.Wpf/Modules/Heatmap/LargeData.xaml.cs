using DevExpress.Xpf.Charts.Heatmap;
using DevExpress.Xpf.DemoBase;
using System;
using System.Threading.Tasks;
using System.Windows.Threading;

namespace TreeMapDemo {
    [CodeFile("Modules/Heatmap/LargeData.xaml")]
    [CodeFile("Modules/Heatmap/LargeData.xaml.(cs)")]
    [NoAutogeneratedCodeFiles]
    public partial class LargeData : TreeMapDemoModule {
        readonly HeatmapDataSourceGenerator dataGenerator;
        readonly DispatcherTimer timer;

        HeatmapMatrixAdapter DataAdapter { get { return (HeatmapMatrixAdapter)heatmap.DataAdapter; } }

        public LargeData() {
            InitializeComponent();

            dataGenerator = new HeatmapDataSourceGenerator();

            heatmap.DataAdapter = new HeatmapMatrixAdapter() {
                XArguments = HeatmapDataSourceGenerator.GetArray(HeatmapDataSourceGenerator.SizeX),
                YArguments = HeatmapDataSourceGenerator.GetArray(HeatmapDataSourceGenerator.SizeY)
            };
             
            timer = new DispatcherTimer() { Interval = TimeSpan.FromMilliseconds(50) };
            timer.Tick += new EventHandler((_d, _e) => Update());
            Loaded += LargeData_Loaded;
            Unloaded += LargeData_Unloaded;
        }

        void LargeData_Unloaded(object sender, System.Windows.RoutedEventArgs e) {
            timer.IsEnabled = false;
        }
        void LargeData_Loaded(object sender, System.Windows.RoutedEventArgs e) {
            Task.Delay(100).ContinueWith((t) => timer.IsEnabled = true);
        }
        void Update() {
            DataAdapter.Values = dataGenerator.GetMatrix();
        }
        protected override void Hide() {
            timer.IsEnabled = false;
            base.Hide();
        }
    }
}
