using DevExpress.Mvvm.DataAnnotations;
using DevExpress.Mvvm.POCO;
using DevExpress.Utils;
using DevExpress.Xpf.Charts.Heatmap;
using DevExpress.Xpf.DemoBase;
using System;
using System.Windows.Media.Imaging;

namespace TreeMapDemo {
    [CodeFile("Modules/Heatmap/ColorProviders.xaml")]
    [CodeFile("Modules/Heatmap/ColorProviders.xaml.(cs)")]
    [NoAutogeneratedCodeFiles]
    public partial class ColorProviders : TreeMapDemoModule {
        public ColorProviders() {
            InitializeComponent();
        }
    }

    public class ColorProviderInfo {
        public string Name { get; set; }
        public HeatmapColorProviderBase ColorProvider { get; set; }

        public override string ToString() {
            return Name;
        }
    }

    [POCOViewModel]
    public class ColorProvidersDemoViewModel {
        public static ColorProvidersDemoViewModel Create() {
            return ViewModelSource.Create(() => new ColorProvidersDemoViewModel());
        }

        public virtual int[] XArguments { get; set; }
        public virtual int[] YArguments { get; set; }
        public virtual double[,] Values { get; set; }

        protected ColorProvidersDemoViewModel() {
            Uri uri = AssemblyHelper.GetResourceUri(typeof(ColorProviders).Assembly, "/Data/Heightmap.jpg");
            BitmapImage image = new BitmapImage(uri);
            double[,] matrix = new double[image.PixelHeight, image.PixelWidth];
            int stride = image.PixelWidth * 4;
            int size = image.PixelHeight * stride;
            byte[] pixels = new byte[size];
            image.CopyPixels(pixels, stride, 0);
            for (int i = 0; i < image.PixelHeight; i++)
                for (int j = 0; j < image.PixelWidth; j++)
                    matrix[i, j] = BitConverter.ToInt32(pixels, i * stride + 4 * j);
            XArguments = HeatmapDataSourceGenerator.GetArray(image.PixelWidth);
            YArguments = HeatmapDataSourceGenerator.GetArray(image.PixelHeight);
            Values = matrix;
        }
    }
}
