using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Windows.Data;
using System.Windows.Markup;
using System.Windows.Media;
using System.Xml.Linq;
using DevExpress.Mvvm;
using DevExpress.Mvvm.POCO;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.Ribbon;

namespace TreeMapDemo
{
    [CodeFile("Modules/Heatmap/Selection.xaml")]
    [CodeFile("Modules/Heatmap/Selection.xaml.(cs)")]
    [NoAutogeneratedCodeFiles]
    public partial class HeatmapSelection : TreeMapDemoModule
    {
        public HeatmapSelection() {
            InitializeComponent();
        }
    }

    public class InteractionViewModel : BindableBase
    {
        public static InteractionViewModel Create() {
            return ViewModelSource.Create(() => new InteractionViewModel());
        }

        readonly List<ProductSale> sales;
        ObservableCollection<object> selectedSales;

        public List<ProductSale> Sales { get { return sales; } }
        public virtual ObservableCollection<object> SelectedSales
        {
            get { return selectedSales; }
            set
            {
                if(selectedSales == value)
                    return;
                selectedSales = value;
                if (selectedSales != null)
                    selectedSales.CollectionChanged += (s, e) => RaisePropertyChanged("SelectedSales");
                RaisePropertyChanged("SelectedSales");
            }
        }
        protected InteractionViewModel() {
            sales = LoadData();
            SelectedSales = new ObservableCollection<object>() { sales[0] };
        }

        List<ProductSale> LoadData() {
            List<ProductSale> data = new List<ProductSale>();
            try {
                XDocument sales_xml = DataLoader.LoadXDocumentFromResources("/Data/Sales.xml");
                foreach (XElement monthSale in sales_xml.Root.Elements()) {
                    string product = monthSale.Element("Product").Value;
                    string month = monthSale.Element("Month").Value;
                    List<DailySale> dailySales = new List<DailySale>();
                    foreach (XElement daySale in monthSale.Elements("SalesByDay").Elements("DailySale")) {
                        dailySales.Add(new DailySale() {
                            Product = product,
                            Date = Convert.ToDateTime(daySale.Element("Date").Value),
                            Revenue = Convert.ToDouble(daySale.Element("Revenue").Value)
                        });
                    }
                    data.Add(new ProductSale() { SalesByDay = dailySales });
                }
            }
            catch {
            }
            return data;
        }
    }
    public class ProductSale {
        public string Product { get { return SalesByDay[0].Product; } }
        public string Month { get { return SalesByDay[0].Date.ToString("MMMM"); } }
        public double RevenueByMonth { get { return SalesByDay.Sum(s => s.Revenue); } }

        public List<DailySale> SalesByDay { get; set; }
    }
    public class DailySale {
        public string Product { get; set; }
        public double Revenue { get; set; }
        public DateTime Date { get; set; }
    }
    public class SelectedItemsToDataSourceConverter : MarkupExtension, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            IEnumerable<object> selectedItems = value as IEnumerable<object>;
            if (selectedItems == null)
                return null;
            List<DailySale> result = new List<DailySale>();
            foreach (ProductSale item in selectedItems)
                result.AddRange(item.SalesByDay);
            return result;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
            return value;
        }
        public override object ProvideValue(IServiceProvider serviceProvider) {
            return this;
        }
    }

    public class SaveOrderComparer : MarkupExtension, IComparer
    {
        public int Compare(object x, object y) {
            return 0;
        }
        public override object ProvideValue(IServiceProvider serviceProvider) {
            return this;
        }
    }
}
