using System.Collections;
using System.Collections.Generic;
using System.Windows.Media;
using System.Xml.Linq;
using DevExpress.TreeMap;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.TreeMap;

namespace TreeMapDemo {
    [CodeFile("Modules/Sunburst/FlatDataAdapter.xaml")]
    [CodeFile("Modules/Sunburst/FlatDataAdapter.xaml.(cs)")]
    [NoAutogeneratedCodeFiles]
    public partial class SunburstFlatDataAdapterDemo : TreeMapDemoModule {
        public SunburstFlatDataAdapterDemo() {
            InitializeComponent();
            DataContext = LoadDataFromXML();
        }

        List<ChemicalElement> LoadDataFromXML() {
            XDocument document = DataLoader.LoadXDocumentFromResources("/Data/ChemicalElements.xml");
            List<ChemicalElement> infos = new List<ChemicalElement>();
            if (document != null) {
                foreach (XElement element in document.Element("ArrayOfElement").Elements()) {
                    ChemicalElement chemicalElement = new ChemicalElement();
                    chemicalElement.Name = element.Element("Name").Value;
                    
                    chemicalElement.AtomicMass = element.Element("AtomicMass").Value;
                    chemicalElement.AtomicNumber = element.Element("AtomicNumber").Value;
                    chemicalElement.Density = element.Element("Density").Value;
                    chemicalElement.MeltingPoint = element.Element("MeltingPoint").Value;
                    chemicalElement.BoilingPoint = element.Element("BoilingPoint").Value;


                    chemicalElement.Block = element.Element("Block").Value;
                    chemicalElement.Family = element.Element("Family").Value;
                    chemicalElement.Symbol = element.Element("Symbol").Value;
                    infos.Add(chemicalElement);
                }
            }
            return infos;
        }
    }

    public class ChemicalElement {
        public string AtomicNumber { get; set; }
        public string AtomicMass { get; set; }
        public string Density { get; set; }
        public string MeltingPoint { get; set; }
        public string BoilingPoint { get; set; }
        public string Name { get; set; }
        public string Block { get; set; }
        public string Family { get; set; }
        public string Symbol { get; set; }
        public int FakeValue { get { return 1; } }
    }


    public class ChemicalElementColorizer : SunburstPaletteColorizer {
        Dictionary<string, Brush> brushes;

        Dictionary<string, Brush> Brushes {
            get {
                if (brushes == null) {
                    brushes = new Dictionary<string, Brush>();
                    Brush sBlockBrush = new SolidColorBrush(Color.FromArgb(255, 216, 103, 159));
                    sBlockBrush.Freeze();
                    brushes["S-block"] = sBlockBrush;

                    Brush pBlockBrush = new SolidColorBrush(Color.FromArgb(255, 234, 202, 39));
                    pBlockBrush.Freeze();
                    brushes["P-block"] = pBlockBrush;

                    Brush dBlockBrush = new SolidColorBrush(Color.FromArgb(255, 102, 156, 220));
                    dBlockBrush.Freeze();
                    brushes["D-block"] = dBlockBrush;

                    Brush fBlockBrush = new SolidColorBrush(Color.FromArgb(255, 126, 171, 54));
                    fBlockBrush.Freeze();
                    brushes["F-block"] = fBlockBrush;

                    Brush lanthanideBrush = new SolidColorBrush(Color.FromArgb(255, 145, 183, 46));
                    lanthanideBrush.Freeze();
                    brushes["Lanthanide"] = lanthanideBrush;

                    Brush actinideBrush = new SolidColorBrush(Color.FromArgb(255, 107, 160, 52));
                    actinideBrush.Freeze();
                    brushes["Actinide"] = actinideBrush;
                }
                return brushes;
            }
        }

        protected override TreeMapDependencyObject CreateObject() {
            return new ChemicalElementColorizer();
        }
        public override Brush GetItemBrush(ISunburstSectorInfo item) {
            ChemicalElement element = item.GroupInfo.IsParent ? (ChemicalElement)((IList)item.SourceObject)[0] : (ChemicalElement)item.SourceObject;
            string key = element.Block == "F-block" && item.GroupInfo.GroupLevel > 0 ? element.Family : element.Block;         
            return Brushes[key];
        }
    }
}
