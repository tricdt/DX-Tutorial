using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Windows.Data;
using System.Xml.Linq;
using DevExpress.Mvvm.DataAnnotations;
using DevExpress.Mvvm.POCO;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.TreeMap;

namespace TreeMapDemo {
    [CodeFile("Modules/Sunburst/HierarchicalDataAdapter.xaml")]
    [CodeFile("Modules/Sunburst/HierarchicalDataAdapter.xaml.(cs)")]
    [NoAutogeneratedCodeFiles]
    public partial class SunburstHierarchicalDataAdapterDemo : TreeMapDemoModule {
        public SunburstHierarchicalDataAdapterDemo() {
            InitializeComponent();
        }
    }


    public class TypeInfo {
        readonly List<TypeInfo> nestedNamespaces = new List<TypeInfo>();
        readonly string _namespace;
        readonly int count;

        public List<TypeInfo> NestedNamespaces { get { return nestedNamespaces; } }
        public string Namespace { get { return _namespace; } }
        public int Count { get { return count; } }

        public TypeInfo(string _namespace, int count) {
            this._namespace = _namespace;
            this.count = count;

        }
    }


    static class ColorizerNames {
        public const string PaletteColorizer = "Palette Colorizer";
        public const string GroupGradientColorizer = "Group Gradient Colorizer";
        public const string RangeColorizer = "Range Colorizer";
    }


    [POCOViewModel]
    public class SunburstHierarchicalDataAdapterDemoViewModel {
        public static SunburstHierarchicalDataAdapterDemoViewModel Create() {
            return ViewModelSource.Create(() => new SunburstHierarchicalDataAdapterDemoViewModel());
        }

        public virtual List<TypeInfo> DataSource { get; protected set; }
        public virtual string SelectedColorizer { get; set; }
        public virtual bool VaryColorInGroup { get; set; }
        public virtual List<string> Colorizers { get; set; }
        public virtual PaletteBase SelectedPalette { get; set; }
        public virtual List<PaletteBase> Palettes { get; protected set; }
        public virtual GradientColorizerMode SelectedGradientColorizerMode { get; set; }

        protected SunburstHierarchicalDataAdapterDemoViewModel() {
            DataSource = LoadDataFromXML();
            Palettes = CreatePalettesList();
            Colorizers = CreateColorizersList();
            SelectedPalette = Palettes.Where(predicate => predicate.PaletteName == "Office 2016").First();
            SelectedColorizer = ColorizerNames.PaletteColorizer;
        }

        List<string> CreateColorizersList() {
            List<string> colorizers = new List<string>(3);
            colorizers.Add(ColorizerNames.PaletteColorizer);
            colorizers.Add(ColorizerNames.GroupGradientColorizer);
            colorizers.Add(ColorizerNames.RangeColorizer);
            return colorizers;
        }
        List<PaletteBase> CreatePalettesList() {
            List<PaletteBase> palettes = new List<PaletteBase>();
            foreach (Type type in
            Assembly.GetAssembly(typeof(PredefinedPalette)).GetTypes()
            .Where(t => t.IsClass && !t.IsAbstract && t.IsSubclassOf(typeof(PredefinedPalette)))) {
                palettes.Add((PredefinedPalette)Activator.CreateInstance(type));
            }
            palettes.Add(new TrafficLightPalette());
            return palettes;
        }
        List<TypeInfo> LoadDataFromXML() {
            List<TypeInfo> types = new List<TypeInfo>();
            XDocument document = DataLoader.LoadXDocumentFromResources("/Data/XtraBarsTypes.xml");
            if (document != null) {
                foreach (XElement element in document.Element("ArrayOfTypeInfo").Elements())
                    FillTypeInfos(types, element);
            }
            return types;
        }
        void FillTypeInfos(List<TypeInfo> types, XElement element) {
            TypeInfo typeInfo = new TypeInfo(element.Element("Namespace").Value, Convert.ToInt32(element.Element("TypesCount").Value, CultureInfo.InvariantCulture));
            foreach (XElement childElement in element.Element("NestedNamespaces").Elements())
                FillTypeInfos(typeInfo.NestedNamespaces, childElement);
            types.Add(typeInfo);
        }
        PaletteBase prePalette = null;
        protected void OnSelectedColorizerChanged() {
            if (SelectedColorizer == ColorizerNames.RangeColorizer) {
                prePalette = SelectedPalette;
                SelectedPalette = Palettes.Last();
            }
            else if (prePalette != null){
                SelectedPalette = prePalette;
                prePalette = null;
            }
        }
    }


    public class TrafficLightPalette : CustomPalette {
        public override string PaletteName { get { return "Traffic Light (Custom)"; } }

        public TrafficLightPalette() {
            Colors.Add(System.Windows.Media.Colors.Green);
            Colors.Add(System.Windows.Media.Colors.Yellow);
            Colors.Add(System.Windows.Media.Colors.Red);
        }
    }


    public class ColorizerConverter :  IValueConverter {
        public SunburstPaletteColorizer PaletteColorizer { get; set; }
        public SunburstGroupGradientColorizer GroupGradientColorizer { get; set; }
        public SunburstRangeColorizer RangeColorizer { get; set; }

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
            string colorizerName = (string)value;
            switch (colorizerName) {
                case ColorizerNames.PaletteColorizer:
                    return PaletteColorizer;
                case ColorizerNames.GroupGradientColorizer:
                    return GroupGradientColorizer;
                case ColorizerNames.RangeColorizer:
                    return RangeColorizer;
                default:
                    throw new Exception("Unknown colorizer name");
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
            Type colorizerType = value.GetType();
            if (colorizerType == typeof(SunburstPaletteColorizer))
                return ColorizerNames.PaletteColorizer;
            if (colorizerType == typeof(SunburstGroupGradientColorizer))
                return ColorizerNames.GroupGradientColorizer;
            if (colorizerType == typeof(SunburstRangeColorizer))
                return ColorizerNames.RangeColorizer;
            throw new Exception("Unknown colorizer type");
        }
    }


}
