using System;
using System.Globalization;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/XyzChart/Charting3D.xaml"),
     CodeFile("Modules/XyzChart/Charting3D.xaml.(cs)"),
     CodeFile("DataModels/StarsData.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class Charting3dDemo : ChartsDemoModule {
        public Charting3dDemo() {
            InitializeComponent();
        }
    }


    class StarAxisLabelDataToStringConverter : ForwardOnlyValueConverter {
        public override object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
            double res = 0;
            if (double.TryParse(value as string, NumberStyles.Float, CultureInfo.InvariantCulture, out res))
                return Math.Abs(res) > 1000 ? string.Format("{0}k", res * 0.001) : res.ToString();
            return value;
        }

    }


    class StarEffect : ShaderEffect {
        public static readonly DependencyProperty InputProperty = RegisterPixelShaderSamplerProperty("Input", typeof(StarEffect), 0);
        public static readonly DependencyProperty TimeProperty = DependencyProperty.Register("Time", typeof(double), typeof(StarEffect), new UIPropertyMetadata(0D, PixelShaderConstantCallback(0)));
        public static readonly DependencyProperty WaveSizeProperty = DependencyProperty.Register("WaveSize", typeof(double), typeof(StarEffect), new UIPropertyMetadata(196D, PixelShaderConstantCallback(1)));
        public static readonly DependencyProperty CenterPointProperty = DependencyProperty.Register("CenterPoint", typeof(Point), typeof(StarEffect), new UIPropertyMetadata(new Point(0.5D, 0.5D), PixelShaderConstantCallback(2)));
        public static readonly DependencyProperty InnerRadiusProperty = DependencyProperty.Register("InnerRadius", typeof(double), typeof(StarEffect), new UIPropertyMetadata(0.2D, PixelShaderConstantCallback(3)));
        public static readonly DependencyProperty OuterRadiusProperty = DependencyProperty.Register("OuterRadius", typeof(double), typeof(StarEffect), new UIPropertyMetadata(0.4D, PixelShaderConstantCallback(4)));
        public static readonly DependencyProperty MagnificationAmountProperty = DependencyProperty.Register("MagnificationAmount", typeof(double), typeof(StarEffect), new UIPropertyMetadata(1D, PixelShaderConstantCallback(5)));
        public static readonly DependencyProperty AspectRatioProperty = DependencyProperty.Register("AspectRatio", typeof(double), typeof(StarEffect), new UIPropertyMetadata(1.5D, PixelShaderConstantCallback(6)));
        public static readonly DependencyProperty BlurAmountProperty = DependencyProperty.Register("BlurAmount", typeof(double), typeof(StarEffect), new UIPropertyMetadata(2D, PixelShaderConstantCallback(7)));
        public static readonly DependencyProperty MinValueProperty = DependencyProperty.Register("MinValue", typeof(double), typeof(StarEffect), new UIPropertyMetadata(0D, PixelShaderConstantCallback(8)));
        public static readonly DependencyProperty MaxValueProperty = DependencyProperty.Register("MaxValue", typeof(double), typeof(StarEffect), new UIPropertyMetadata(0.5D, PixelShaderConstantCallback(9)));
        public StarEffect() {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri(@"/ChartsDemo;component/Data/Star.ps", UriKind.Relative);
            PixelShader = pixelShader;

            UpdateShaderValue(InputProperty);
            UpdateShaderValue(TimeProperty);
            UpdateShaderValue(WaveSizeProperty);
            UpdateShaderValue(CenterPointProperty);
            UpdateShaderValue(InnerRadiusProperty);
            UpdateShaderValue(OuterRadiusProperty);
            UpdateShaderValue(MagnificationAmountProperty);
            UpdateShaderValue(AspectRatioProperty);
            UpdateShaderValue(BlurAmountProperty);
            UpdateShaderValue(MinValueProperty);
            UpdateShaderValue(MaxValueProperty);
        }
        public Brush Input {
            get {
                return (Brush)(GetValue(InputProperty));
            }
            set {
                SetValue(InputProperty, value);
            }
        }
        public double Time {
            get { return (double)GetValue(TimeProperty); }
            set { SetValue(TimeProperty, value); }
        }
        public double WaveSize {
            get { return (double)GetValue(WaveSizeProperty); }
            set { SetValue(WaveSizeProperty, value); }
        }
        public Point CenterPoint {
            get { return (Point)GetValue(CenterPointProperty); }
            set { SetValue(CenterPointProperty, value); }
        }
        public double InnerRadius {
            get { return (double)GetValue(InnerRadiusProperty); }
            set { SetValue(InnerRadiusProperty, value); }
        }
        public double OuterRadius {
            get { return (double)GetValue(OuterRadiusProperty); }
            set { SetValue(OuterRadiusProperty, value); }
        }
        public double MagnificationAmount {
            get { return (double)GetValue(MagnificationAmountProperty); }
            set { SetValue(MagnificationAmountProperty, value); }
        }
        public double AspectRatio {
            get { return (double)GetValue(AspectRatioProperty); }
            set { SetValue(AspectRatioProperty, value); }
        }
        public double BlurAmount {
            get { return (double)GetValue(BlurAmountProperty); }
            set { SetValue(BlurAmountProperty, value); }
        }
        public double MinValue {
            get { return (double)GetValue(MinValueProperty); }
            set { SetValue(MinValueProperty, value); }
        }
        public double MaxValue {
            get { return (double)GetValue(MaxValueProperty); }
            set { SetValue(MaxValueProperty, value); }
        }
    }

}
