using System;
using System.Linq;
using System.Windows;
using System.Windows.Threading;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/Interaction/Animation.xaml"),
     CodeFile("Modules/Interaction/Animation.xaml.(cs)"),
     CodeFile("Modules/Interaction/AnimationHelper.(cs)"),
     CodeFile("Modules/SeriesInfo.(cs)"),
     CodeFile("DataModels/AnimationDemoDataSources.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class AnimationDemo : ChartsDemoModule {
        public AnimationDemo() {
            InitializeComponent();
            Dispatcher.BeginInvoke(new Action(OnSeriesTemplateChanged), DispatcherPriority.Background);
            Dispatcher.BeginInvoke(new Action(this.chart.Animate), DispatcherPriority.ApplicationIdle);
        }

        void SeriesTemplateChanged(object sender, RoutedEventArgs e) {
            Dispatcher.BeginInvoke(new Action(OnSeriesTemplateChanged), DispatcherPriority.Background);
        }
        void OnSeriesTemplateChanged() {
            var firstSeries = this.chart.Diagram.Series.FirstOrDefault();
            if (firstSeries == null) return;
            if (firstSeries is RangeBarOverlappedSeries2D) {
                ((RangeBarOverlappedSeries2D)this.chart.Diagram.Series.Last()).BarWidth = 0.2;
            }
            if (firstSeries is ISupportStackedGroup) {
                for (int i = 0; i < this.chart.Diagram.Series.Count; i++)
                    ((ISupportStackedGroup)this.chart.Diagram.Series[i]).StackedGroup = i % 2;
            }
            AnimationHelper.InitializeAnimationListBoxEdit(this.lbPointAnimation, firstSeries.GetPredefinedPointAnimationKinds(), AnimationHelper.GetDefaultPointAnimationType(firstSeries));
            AnimationHelper.InitializeAnimationListBoxEdit(this.lbSeriesAnimation, firstSeries.GetPredefinedSeriesAnimationKinds(), AnimationHelper.GetDefaultSeriesAnimationType(firstSeries));
            if (IsModuleLoaded)
                this.chart.Animate();
        }
        void AnimationKindChanged(object sender, RoutedEventArgs e) {
            if (this.chart.Diagram == null) return;
            for (int i = 0; i < this.chart.Diagram.Series.Count; i++) {
                var series = this.chart.Diagram.Series[i];
                var seriesAnimation = AnimationHelper.CreateSeriesAnimation((AnimationKind)this.lbSeriesAnimation.SelectedItem, i);
                var pointAnimation = AnimationHelper.CreatePointAnimation((AnimationKind)this.lbPointAnimation.SelectedItem, seriesAnimation, i);
                series.SetSeriesAnimation(seriesAnimation);
                series.SetPointAnimation(pointAnimation);
            }
            if (IsModuleLoaded)
                this.chart.Animate();
        }
    }
}
