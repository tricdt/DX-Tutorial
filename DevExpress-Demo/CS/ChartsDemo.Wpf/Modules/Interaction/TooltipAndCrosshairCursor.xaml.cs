using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/Interaction/TooltipAndCrosshairCursor.xaml"),
     CodeFile("Modules/Interaction/TooltipAndCrosshairCursor.xaml.(cs)"),
     CodeFile("DataModels/DevAVSalesData.cs"),
     NoAutogeneratedCodeFiles]
    public partial class TooltipAndCrosshairCursorDemo : ChartsDemoModule {
        public TooltipAndCrosshairCursorDemo() {
            InitializeComponent();

        }

        void ToolTipController_ToolTipOpening(object sender, ChartToolTipEventArgs e) {
            int colorIndex = e.Series.Points.IndexOf(e.SeriesPoint);
            Color barColor = e.ChartControl.Palette[colorIndex];
            SolidColorBrush barBrush = new SolidColorBrush(barColor);
            barBrush.Freeze();
            e.Hint = new TooltipHintItem() {
                SaleItem = e.SeriesPoint.Tag as DevAVSaleItem,
                Brush = barBrush
            };
        }
    }

    class TooltipHintItem {
        public DevAVSaleItem SaleItem { get; set; }
        public SolidColorBrush Brush { get; set; }

        public override string ToString() {
            return string.Empty;
        }
    }

    class TooltipPointTemplateConverter : DependencyObject, IValueConverter {
        public static readonly DependencyProperty StandardTemplateProperty = DependencyProperty.Register("StandardTemplate",
            typeof(DataTemplate), typeof(TooltipPointTemplateConverter), new PropertyMetadata(null));

        public DataTemplate ImageTemplate { get; set; }
        public DataTemplate StandardTemplate {
            get { return (DataTemplate)GetValue(StandardTemplateProperty); }
            set { SetValue(StandardTemplateProperty, value); }
        }

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
            string selected = value as string;
            switch (selected) {
                case "Image":
                    return ImageTemplate;
                case "Text":
                    return StandardTemplate;
                default:
                    return value;
            }
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
            return value;
        }
    }

    class TooltipPositionWrapper {
        public ToolTipPosition Position { get; set; }
        public string DisplayName { get; set; }

        public override string ToString() {
            return DisplayName;
        }
    }
}
