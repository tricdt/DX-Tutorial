using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using DevExpress.Mvvm.UI;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/Highlighted/SeriesPointMoving.xaml"),
     CodeFile("Modules/Highlighted/SeriesPointMoving.xaml.(cs)"),
     CodeFile("Modules/Highlighted/SeriesPointMovingViewModel.(cs)"),
     CodeFile("DataModels/SeriesPointMovingDataModel.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class SeriesPointMovingDemo : ChartsDemoModule {
        public SeriesPointMovingDemo() {
            InitializeComponent();
        }

        private void OkClick(object sender, RoutedEventArgs e) {
            flyoutControl.IsOpen = false;
        }
    }

    public class SeriesPointMovingTemplateSelector : DataTemplateSelector {
        public DataTemplate ProductionTemplate { get; set; }
        public DataTemplate StockTemplate { get; set; }
        public DataTemplate DemandTemplate { get; set; }
        public DataTemplate CostTemplate { get; set; }
        public DataTemplate IncomeTemplate { get; set; }

        public override DataTemplate SelectTemplate(object item, DependencyObject container) {
            SeriesPointMovingSeriesViewModel seriesItem = item as SeriesPointMovingSeriesViewModel;
            if (seriesItem != null) {
                switch (seriesItem.Name) {
                    case "Production":
                        return ProductionTemplate;
                    case "Stock":
                        return StockTemplate;
                    case "Demand":
                        return DemandTemplate;
                    case "Retail Price":
                        return CostTemplate;
                    case "Income":
                        return IncomeTemplate;
                }
            }
            return null;
        }
    }

    public class MouseToSeriesPointTagEventArgsConverter : EventArgsConverterBase<MouseEventArgs> {
        protected override object Convert(object sender, MouseEventArgs args) {
            ChartControl chart = sender as ChartControl;
            if (chart == null)
                return null;
            ChartHitInfo hitInfo = chart.CalcHitInfo(args.GetPosition(chart));
            if (hitInfo.Series == null || hitInfo.SeriesPoint == null)
                return null;
            XYSeries2D series2D = (XYSeries2D)hitInfo.Series;
            SeriesPointMovingSeriesViewModel seriesItem = (SeriesPointMovingSeriesViewModel)hitInfo.Series.Tag;
            if (seriesItem.Name == "Stock" || seriesItem.Name == "Income")
                return null;

            MouseDownData mouseDownData = new MouseDownData();
            mouseDownData.Series = seriesItem;
            mouseDownData.CurrentItem = (DraggableItem)hitInfo.SeriesPoint.Tag;
            mouseDownData.Chart = chart;
            return mouseDownData;
        }
    }

    public class MouseDownData {
        public DraggableItem CurrentItem { get; set; }
        public SeriesPointMovingSeriesViewModel Series { get; set; }
        public ChartControl Chart { get; set; }
    }

    public class MouseToLocationEventArgsConverter : EventArgsConverterBase<MouseEventArgs> {
        protected override object Convert(object sender, MouseEventArgs args) {
            ChartControl chart = sender as ChartControl;
            if (chart == null)
                return null;
            ChartHitInfo hitInfo = chart.CalcHitInfo(args.GetPosition(chart));
            if (hitInfo == null)
                return null;
            XYDiagram2D diagram = (XYDiagram2D)chart.Diagram;
            DiagramCoordinates coords = diagram.PointToDiagram(args.GetPosition(chart));

            MouseMoveData moveData = new MouseMoveData();
            moveData.IsOnDraggablePoint = false;
            if (hitInfo.Series != null && hitInfo.SeriesPoint != null) {
                string seriesName = ((SeriesPointMovingSeriesViewModel)hitInfo.Series.Tag).Name;
                if (seriesName != "Income" && seriesName != "Stock")
                    moveData.IsOnDraggablePoint = true;
            }
            moveData.DiagramNumericalValue = coords.NumericalValue;
            if (hitInfo.Pane != null)
                moveData.Pane = hitInfo.Pane.Tag as SeriePointMovingPaneViewModel;

            return moveData;
        }
    }

    public class MouseMoveData {
        public double DiagramNumericalValue { get; set; }
        public SeriePointMovingPaneViewModel Pane { get; set; }
        public bool IsOnDraggablePoint { get; set; }
    }
}
