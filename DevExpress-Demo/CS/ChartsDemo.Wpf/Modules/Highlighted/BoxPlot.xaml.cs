using System;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/Highlighted/BoxPlot.xaml"),
     CodeFile("Modules/Highlighted/BoxPlot.xaml.(cs)"),
     CodeFile("Modules/Highlighted/BoxPlotViewModel.(cs)"),
     CodeFile("DataModels/BoxPlotPoint.(cs)"),
     CodeFile("DataModels/RandomSequenceGenerator.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class BoxPlotDemo : ChartsDemoModule {
        public static readonly DependencyProperty ChartPaletteProperty = DependencyProperty.Register("ChartPalette", typeof(Palette), typeof(BoxPlotDemo), new PropertyMetadata(OnChartPaletteChanged));

        static void OnChartPaletteChanged(DependencyObject d, DependencyPropertyChangedEventArgs e) {
            BoxPlotDemo demo = d as BoxPlotDemo;
            if (demo != null)
                demo.ColorizeSeries();
        }

        const byte Alpha = 40;
        const int InitialVisibleArgsCount = 7;
        bool pointSeries1AnimationCompleted;
        bool pointSeries2AnimationCompleted;

        BoxPlotViewModel ViewModel { get { return DataContext as BoxPlotViewModel; } }

        public BoxPlotDemo() {
            InitializeComponent();
            Binding myBinding = new Binding("Palette");
            myBinding.Source = this.chart;
            myBinding.Mode = BindingMode.OneWay;
            SetBinding(ChartPaletteProperty, myBinding);
            Loaded += (s, e) => SetVisualRange();
        }
        void SetVisualRange() {
            XYDiagram2D diagram = (XYDiagram2D)chart.Diagram;
            double max = (double)diagram.ActualAxisX.ActualWholeRange.ActualMaxValue;
            double min = max - InitialVisibleArgsCount;
            diagram.ActualAxisX.ActualVisualRange.SetMinMaxValues(min, max);
        }
        void ColorizeSeries() {
            Color color1 = this.chart.Palette[0];
            color1 = Color.FromArgb(Alpha, color1.R, color1.G, color1.B);
            SolidColorBrush brush1 = new SolidColorBrush(color1);
            brush1.Freeze();
            pointSeries1.Brush = brush1;
            Color color2 = this.chart.Palette[1];
            color1 = Color.FromArgb(Alpha, color2.R, color2.G, color2.B);
            SolidColorBrush brush2 = new SolidColorBrush(color1);
            brush1.Freeze();
            pointSeries2.Brush = brush2;
        }
        void Pane_MouseMove(object sender, MouseEventArgs e) {
            e.Handled = true;
        }
        void OnAddNewDataSetClick(object sender, RoutedEventArgs e) {
            if (!pointSeries1AnimationCompleted || !pointSeries2AnimationCompleted)
                CalculateBoxPlotForLastExperiment();
            pointSeries1AnimationCompleted = false;
            pointSeries2AnimationCompleted = false;
            pointSeries1.Animate();
            pointSeries2.Animate();
        }
        void OnPointSeries1AnimationCompleted(object sender, EventArgs e) {
            pointSeries1AnimationCompleted = true;
            if (pointSeries2AnimationCompleted)
                CalculateBoxPlotForLastExperiment();
        }
        void OnPointSeries2AnimationCompleted(object sender, EventArgs e) {
            pointSeries2AnimationCompleted = true;
            if (pointSeries1AnimationCompleted)
                CalculateBoxPlotForLastExperiment();
        }
        void CalculateBoxPlotForLastExperiment() {
            if (ViewModel != null)
                ViewModel.CalculateBoxPlotForLastExperiment();
        }

        protected override void Show() {
            base.Show();
            Storyboard storyboard1 = (Storyboard)pointSeries1.Resources["storyboard"];
            storyboard1.Completed += OnPointSeries1AnimationCompleted;
            Storyboard storyboard2 = (Storyboard)pointSeries2.Resources["storyboard"];
            storyboard2.Completed += OnPointSeries2AnimationCompleted;
        }
    }
}

