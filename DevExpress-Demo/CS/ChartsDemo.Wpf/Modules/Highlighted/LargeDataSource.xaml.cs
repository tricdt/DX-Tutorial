using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;
using System;
using System.Collections.Generic;
using System.Runtime;
using System.Windows;
using System.Windows.Threading;
namespace ChartsDemo {
    [CodeFile("Modules/Highlighted/LargeDataSource.xaml")]
    [CodeFile("Modules/Highlighted/LargeDataSource.xaml.(cs)")]
    [CodeFile("DataModels/SimpleDataPoint.(cs)")]
    [NoAutogeneratedCodeFiles]
    public partial class LargeDataSourceDemo : ChartsDemoModule {
        const int InitialPointsCount = 2500000 ;
        public static readonly DependencyProperty DisplayDiagnosticControlsProperty =
            DependencyProperty.Register("DisplayDiagnosticControls", typeof(bool), typeof(LargeDataSourceDemo), new PropertyMetadata(false));
        int seriesIndex = 1;
        int totalPointsCount = 0;
        public LargeDataSourceDemo() {
            InitializeComponent();
#if DEBUG
            DisplayDiagnosticControls = true;
#endif
            DataContext = this;
            totalPointsCount = 0;
            InitializeSeries(InitialPointsCount);

        }

        void InitializeSeries(int pointsCount) {
            ExecuteIdle(PerformAddSeries, pointsCount);
        }
        void AddSeries(int pointsCount) {
            ShowLoadingPanel();
            ExecuteIdle(PerformAddSeries, pointsCount);
            ExecuteIdle(HideLoadingPanel);
        }
        void btnAdd1MPoints_Click(object sender, RoutedEventArgs e) {
            AddSeries(1000000);
        }
        void btnAdd250KPoints_Click(object sender, RoutedEventArgs e) {
            AddSeries(250000);
        }
        void btnAdd500KPoints_Click(object sender, RoutedEventArgs e) {
            AddSeries(500000);
        }
        void btnClear_Click(object sender, RoutedEventArgs e) {
            var series = new List<Series>(xyDiagram.Series);
            xyDiagram.Series.Clear();
            series.ForEach(s => s.DataSource = null);
            totalPointsCount = 0;
            pointCountTitle.Content = string.Format("Total Points Count: {0:#,0.}", totalPointsCount);
        }
        void ExecuteIdle(Action operation) {
            Dispatcher.BeginInvoke(operation, DispatcherPriority.Background);
        }
        void ExecuteIdle(Action<int> operation, int parameter) {
            Dispatcher.BeginInvoke(operation, DispatcherPriority.Background, parameter);
        }
        void HideLoadingPanel() {
            loadingDecorator.IsSplashScreenShown = false;
        }
        void PerformAddSeries(int pointsCount) {
            try {
                string asmSuffix = typeof(LineSeries2D).AssemblyQualifiedName;
                asmSuffix = asmSuffix.Substring(asmSuffix.IndexOf(","));
                var type = typeof(LineSeries2D);
                XYSeries2D series = (XYSeries2D)Activator.CreateInstance(type);
                series.DisplayName = string.Format("Series {0}", seriesIndex);
                seriesIndex += 1;
                series.ArgumentDataMember = "Argument";
                series.ValueDataMember = "Value";
                series.AllowResample = true;
                series.DataSource = LargeDataGenerator.GenerateSeriesDataSource(pointsCount);
                xyDiagram.Series.Add(series);
                totalPointsCount += pointsCount;
                pointCountTitle.Content = string.Format("Total Points Count: {0:#,0.}", totalPointsCount);
            }
            catch (OutOfMemoryException) {
                btnClear_Click(null, null);
                GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce;
                GC.Collect(2, GCCollectionMode.Forced);
                GC.WaitForFullGCComplete();
                PerformAddSeries(pointsCount);
            }
        }
        void ShowLoadingPanel() {
            loadingDecorator.IsSplashScreenShown = true;
        }
        public bool DisplayDiagnosticControls {
            get { return (bool)GetValue(DisplayDiagnosticControlsProperty); }
            set { SetValue(DisplayDiagnosticControlsProperty, value); }
        }
    }
}
