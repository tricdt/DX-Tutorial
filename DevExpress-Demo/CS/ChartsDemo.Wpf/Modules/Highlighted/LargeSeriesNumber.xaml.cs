using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/Highlighted/LargeSeriesNumber.xaml"),
     CodeFile("Modules/Highlighted/LargeSeriesNumber.xaml.(cs)"),
     CodeFile("DataModels/SeaIceAreaDataReader.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class LargeSeriesNumberDemo : ChartsDemoModule {
        public static readonly DependencyProperty ChartPaletteProperty = DependencyProperty.Register("ChartPalette", typeof(Palette), typeof(LargeSeriesNumberDemo), new PropertyMetadata(OnChartPaletteChanged));

        static void OnChartPaletteChanged(DependencyObject d, DependencyPropertyChangedEventArgs e) {
            LargeSeriesNumberDemo demo = d as LargeSeriesNumberDemo;
            if (demo != null)
                demo.ColorizeSeries();
        }

        const int UngrouppedSeriesCount = 11;

        int othersSeriesIndex;

        SeriesCollection SeriesCollection {
            get { return this.chart.Diagram.Series; }
        }

        public Palette ChartPalette {
            get { return (Palette)GetValue(ChartPaletteProperty); }
            set { SetValue(ChartPaletteProperty, value); }
        }

        public LargeSeriesNumberDemo() {
            InitializeComponent();
            Binding myBinding = new Binding("Palette");
            myBinding.Source = this.chart;
            myBinding.Mode = BindingMode.OneWay;
            SetBinding(ChartPaletteProperty, myBinding);
        }

        void OnApplicationThemeChanged(DependencyObject sender, ThemeChangedRoutedEventArgs e) {
            ColorizeSeries();
        }
        void chart_BoundDataChanged(object sender, RoutedEventArgs e) {
            if (SeriesCollection.Count == 0)
                return;
            int seriesCount = SeriesCollection.Count;
            othersSeriesIndex = seriesCount - UngrouppedSeriesCount;
            ColorizeSeries();
            for (int i = 0; i < seriesCount; i++) {
                LineSeries2D lineSeries = (LineSeries2D)SeriesCollection[i];
                DependencyPropertyDescriptor descriptor = DependencyPropertyDescriptor.FromProperty(Series.CheckedInLegendProperty, typeof(Series));
                descriptor.AddValueChanged(lineSeries, OnCheckedInLegendChanged);
                if (i < othersSeriesIndex)
                    SeriesCollection[i].ShowInLegend = false;
                else if (i == othersSeriesIndex)
                    lineSeries.LegendTextPattern = "Others";
                else if (i == SeriesCollection.Count - 1) {
                    if (lineSeries != null) {
                        if (lineSeries.LineStyle != null)
                            lineSeries.LineStyle.Thickness = 5;
                        lineSeries.FirstPoint = new SidePoint() { LabelDisplayMode = SidePointDisplayMode.SeriesPoint };
                        lineSeries.FirstPoint.Label = new SeriesLabel() { TextPattern = "{V:0.000M km²}" };
                        lineSeries.LastPoint = new SidePoint() { LabelDisplayMode = SidePointDisplayMode.SeriesPoint };
                        lineSeries.LastPoint.Label = new SeriesLabel() { TextPattern = "{V:0.000M km²}" };
                        lineSeries.ActualLabel.TextPattern = "{FullDate:MM/dd/yyyy}\n{V:0.000M km²}";
                    }
                }
            }
        }
        void ColorizeSeries() {
            int seriesCount = SeriesCollection.Count;
            if (ChartPalette == null)
                return;
            Color color = ChartPalette[0];
            for (int i = 0; i < seriesCount; i++) {
                LineSeries2D series = (LineSeries2D)SeriesCollection[i];
                Color seriesColor = ColorUtils.ColorizeSeaIceSeries(color, seriesCount - i, ApplicationThemeHelper.ApplicationThemeName);
                SolidColorBrush brush = new SolidColorBrush(seriesColor);
                brush.Freeze();
                series.Brush = brush;
            }
        }
        void OnCheckedInLegendChanged(object sender, EventArgs e) {
            LineSeries2D series = sender as LineSeries2D;
            if (series == null || SeriesCollection.IndexOf(series) != othersSeriesIndex)
                return;
            for (int i = 0; i < SeriesCollection.Count; i++)
                if (i < othersSeriesIndex)
                    SeriesCollection[i].Visible = series.CheckedInLegend;
        }
        void ChartsDemoModule_ModuleLoaded(object sender, RoutedEventArgs e) {
            ThemeManager.ApplicationThemeChanged += OnApplicationThemeChanged;
        }
        void ChartsDemoModule_ModuleUnloaded(object sender, RoutedEventArgs e) {
            ThemeManager.ApplicationThemeChanged -= OnApplicationThemeChanged;
            foreach (Series series in SeriesCollection) {
                DependencyPropertyDescriptor descriptor = DependencyPropertyDescriptor.FromProperty(Series.CheckedInLegendProperty, typeof(Series));
                descriptor.RemoveValueChanged(series, OnCheckedInLegendChanged);
            }
        }
    }
}
