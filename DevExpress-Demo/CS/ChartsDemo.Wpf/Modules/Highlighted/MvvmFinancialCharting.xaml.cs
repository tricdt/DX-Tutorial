using System;
using System.Windows;
using System.Windows.Controls;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/Highlighted/MvvmFinancialCharting.xaml"),
     CodeFile("Modules/Highlighted/MvvmFinancialCharting.xaml.(cs)"),
     CodeFile("Modules/Highlighted/MvvmFinancialChartingViewModel.(cs)"),
     CodeFile("DataModels/RealTimeFinancialDataGenerator.(cs)"),
     CodeFile("DataModels/FinancialDataPoint.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class MvvmFinancialChartingDemo : ChartsDemoModule {
        MvvmFinancialChartingViewModel ViewModel {
            get { return DataContext as MvvmFinancialChartingViewModel; }
        }
        public override ChartControl ModuleChartControl { get { return chart; } }

        public MvvmFinancialChartingDemo() {
            InitializeComponent();
            Unloaded += (s, e) => { ViewModel.Unload(); };
        }
        void BarCheckItem_CheckedChanged(object sender, DevExpress.Xpf.Bars.ItemClickEventArgs e) {
            if (DrawTrendLineIndicator.IsChecked.GetValueOrDefault() || DrawFibonacciArcsIndicatorItem.IsChecked.GetValueOrDefault() ||
                DrawFibonacciFansIndicatorItem.IsChecked.GetValueOrDefault() || DrawFibonacciRetracementIndicatorItem.IsChecked.GetValueOrDefault() ||
                RemoveIndicatorItem.IsChecked.GetValueOrDefault() || AddTextAnnotationItem.IsChecked.GetValueOrDefault() || AddImageAnnotationItem.IsChecked.GetValueOrDefault())
                ViewModel.PauseTimer();
            else
                ViewModel.ResumeTimer();
        }
        public override void OnStartModule() {
            ViewModel.ResumeTimer();
        }
        public override void OnStopModule() {
            ViewModel.PauseTimer();
        }
    }

    class IndicatorTemplateSelector : DataTemplateSelector {
        public override DataTemplate SelectTemplate(object item, DependencyObject container) {
            IndicatorItem indicatorItem = item as IndicatorItem;
            XYSeries2D series = container as XYSeries2D;
            if (indicatorItem == null || series == null)
                return null;
            switch (indicatorItem.Type) {
                case IndicatorType.BollingerBands:
                    return (DataTemplate)series.TryFindResource("bollingerBandsDataTemplate");
                case IndicatorType.CommodityChannelIndex:
                    return (DataTemplate)series.TryFindResource("commodityChannelIndexDataTemplate");
                case IndicatorType.WilliamsR:
                    return (DataTemplate)series.TryFindResource("williamsRDataTemplate");
                default:
                    return null;
            }
        }
    }
}
