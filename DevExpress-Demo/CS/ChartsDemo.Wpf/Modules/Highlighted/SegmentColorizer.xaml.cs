using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Markup;
using System.Windows.Media;
using System.Xml.Serialization;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {
    [CodeFile("Modules/Highlighted/SegmentColorizer.xaml"),
     CodeFile("Modules/Highlighted/SegmentColorizer.xaml.(cs)"),
     CodeFile("DataModels/RealEstateData.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class SegmentColorizerDemo : ChartsDemoModule {
        public SegmentColorizerDemo() {
            InitializeComponent();
            DataContext = DailyWeather.Load();
        }
    }

    [XmlRoot("DailyWeather")]
    public class DailyWeather : List<Weather>, INotifyPropertyChanged {
        public static readonly DoubleCollection CelsiusRangeStops = new DoubleCollection() { -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30 };
        public static readonly DoubleCollection FahrenheitRangeStops = new DoubleCollection() { -40, -31, -22, -13, -4, 5, 14, 23, 32, 41, 50, 59, 68, 77, 86 };

        public static DailyWeather Load() {
            XmlSerializer serializer = XmlSerializer.FromTypes(new[] { typeof(DailyWeather) })[0];
            var dailyWeather = (DailyWeather)serializer.Deserialize(DataLoader.LoadFromResources("/Data/CityWeather.xml"));
            foreach (var weather in dailyWeather)
                weather.Date = new DateTime(DateTime.Now.Year - 1, weather.Date.Month, weather.Date.Day);
            return dailyWeather;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        DoubleCollection actualTemperatureRanges = FahrenheitRangeStops;
        public DoubleCollection ActualTemperatureRanges {
            get { return actualTemperatureRanges; }
            set {
                actualTemperatureRanges = value;
                if (PropertyChanged != null)
                    PropertyChanged(this, new PropertyChangedEventArgs("ActualTemperatureRanges"));
            }
        }
    }

    public class Weather {
        public DateTime Date { get; set; }
        public double Celsius { get; set; }
        public double Fahrenheit { get; set; }
    }

    public class DoubleCollectionToStringConverterConverter : MarkupExtension, IValueConverter {
        const string Fahrenheit = "Fahrenheit";
        const string Celsius = "Celsius";

        object IValueConverter.Convert(object values, Type targetType, object parameter, CultureInfo culture) {
            if (values == DailyWeather.FahrenheitRangeStops)
                return Fahrenheit;
            else
                return Celsius;
        }
        object IValueConverter.ConvertBack(object value, Type targetTypes, object parameter, CultureInfo culture) {
            if (value.ToString() == Fahrenheit)
                return DailyWeather.FahrenheitRangeStops;
            else
                return DailyWeather.CelsiusRangeStops;
        }

        public override object ProvideValue(IServiceProvider serviceProvider) {
            return this;
        }
    }

    public class MonthKeyProvider : MarkupExtension, IColorizerKeyProvider {
        readonly CultureInfo cultureInfo = CultureInfo.CreateSpecificCulture("en-US");
        object IColorizerKeyProvider.GetKey(object item) {
            return string.Format(this.cultureInfo, "{0:MMMM}", item);
        }

        public override object ProvideValue(IServiceProvider serviceProvider) {
            return this;
        }
    }
}

