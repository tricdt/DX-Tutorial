using System;
using System.ComponentModel;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.DemoBase;

namespace ChartsDemo {

    [CodeFile("Modules/ChartElements/DateTimeScale.xaml"),
     CodeFile("Modules/ChartElements/DateTimeScale.xaml.(cs)"),
     CodeFile("DataModels/FinancialDataWithBreaksGenerator.(cs)"),
     CodeFile("Modules/ChartElements/DateTimeScaleViewModel.(cs)"),
     CodeFile("DataModels/FinancialDataPoint.(cs)"),
     NoAutogeneratedCodeFiles]
    public partial class DateTimeScaleDemo : ChartsDemoModule {
        public DateTimeScaleDemo() {
            InitializeComponent();
        }
    }


    class ScaleModeToScaleOptionsConverter : IValueConverter {
        public AutomaticDateTimeScaleOptions AutomaticDateTimeScaleOptions { get; set; }
        public ManualDateTimeScaleOptions ManualDateTimeScaleOptions { get; set; }
        public ContinuousDateTimeScaleOptions ContinuousDateTimeScaleOptions { get; set; }


        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
            if (value.GetType() != typeof(ScaleMode))
                return value;
            ScaleMode scaleMode = (ScaleMode)value;
            switch (scaleMode) {
                case ScaleMode.Automatic:
                    return AutomaticDateTimeScaleOptions;
                case ScaleMode.Manual:
                    return ManualDateTimeScaleOptions;
                case ScaleMode.Continuous:
                    return ContinuousDateTimeScaleOptions;
                default:
                    throw new InvalidEnumArgumentException(string.Format("The {0} enum value is unknown", scaleMode));
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
            if (!(targetType == typeof(ScaleMode)))
                return value;
            if (value is AutomaticDateTimeScaleOptions)
                return ScaleMode.Automatic;
            if (value is ManualDateTimeScaleOptions)
                return ScaleMode.Manual;
            if (value is ContinuousDateTimeScaleOptions)
                return ScaleMode.Continuous;
            throw new ArgumentException("An instance of the AutomaticDateTimeScaleOptions, ManualDateTimeScaleOptions or ContinuousDateTimeScaleOptions class is expected.");
        }
    }


    class DateTimeScaleSeriesTemplateSelector : DataTemplateSelector {
        public DataTemplate BarSeriesTemplate { get; set; }
        public DataTemplate StockSeriesTemplate { get; set; }

        public override DataTemplate SelectTemplate(object item, DependencyObject container) {
            DateTimeScaleSeriesViewModel seriesItem = item as DateTimeScaleSeriesViewModel;
            switch (seriesItem.SeriesView) {
                case SeriesView.Volume:
                    return BarSeriesTemplate;
                case SeriesView.Price:
                    return StockSeriesTemplate;
                default: throw new InvalidEnumArgumentException(string.Format("The {0} enum value is incorrect", seriesItem.SeriesView));
            }
        }

    }


    class ArgumentToDateTimeMeasureUnitConverter : ForwardOnlyValueConverter {
        public override object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
            if (value.GetType() == typeof(ArgumentMeasureUnit) && targetType == typeof(DateTimeMeasureUnit))
                return (DateTimeMeasureUnit)value;
            else
                return value;
        }
    }

}
