using DevExpress.Mvvm;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.DemoBase.Helpers;
using DevExpress.Xpf.DemoBase.Helpers.TextColorizer;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Reflection;
using System.Windows.Data;

namespace DiagramDemo {
    [NoAutogeneratedCodeFiles]
    public partial class EventsExamplesModule : DiagramDemoModule {
        public EventsExamplesModule() {
            InitializeComponent();
            ShowcaseInfo[] showcases = CreateShowcases();
            var showcasesView = (CollectionViewSource)Resources["showcasesView"];
            showcasesView.Source = showcases;
            tabControl.SelectedIndex = DemoHelper.GetDemoLanguage(typeof(EventsExamplesModule).Assembly) == CodeLanguage.VB ? 1 : 0;
        }

        ShowcaseInfo[] CreateShowcases() {
            const string path = "Modules/EventsExamples";
            return new ShowcaseInfo[] {
                LoadShowcase("Prohibiting actions", "Prohibiting actions 1", path, typeof(ProhibitingActions1Example)),
                LoadShowcase("Prohibiting actions", "Prohibiting actions 2", path, typeof(ProhibitingActions2Example)),
                LoadShowcase("Constraining actions", "Max width", path, typeof(MaxWidthExample)),
                LoadShowcase("Constraining actions", "90-degree-only-rotatable item", path, typeof(NinetyDegreeOnlyRotatableItemExample)),
                LoadShowcase("Constraining actions", "Restricted part of the canvas", path, typeof(RestrictedPartOfTheCanvasExample)),
                LoadShowcase("Constraining actions", "Draw circle", path, typeof(DrawCircleExample)),
                LoadShowcase("Notifications", "Moving feedback and confirmation message", path, typeof(FeedbackAndConfirmationMessageExample)),
                LoadShowcase("Notifications", "Item bounds changed", path, typeof(ItemBoundsChangedExample)),
                LoadShowcase("Notifications", "Expand container by dragging an item over it", path, typeof(ExpandContainerOnDragOver)),
                LoadShowcase("Connectors", "Categorized connectors", path, typeof(CategorizedConnectorsExample)),
                LoadShowcase("Connectors", "Confirmation message", path, typeof(ConfirmationMessageExample)),
            };

        }

        static ShowcaseInfo LoadShowcase(string group, string name, string path, Type exampleType) {
            return new ShowcaseInfo(group, name, exampleType,
                LoadCode(path, exampleType, CodeLanguage.CS),
                LoadCode(path, exampleType, CodeLanguage.VB)
            );
        }
        static CodeLanguageText LoadCode(string path, Type exampleType, CodeLanguage language) {
            return new CodeLanguageText(language, () => Prepare(DemoCodeHelper.LoadSourceCode(path, exampleType, language)));
        }
        static string Prepare(string codeText) {
            if(string.IsNullOrEmpty(codeText)) return string.Empty;
            const string exampleStart = "Code Example Start";
            const string exampleEnd = "Code Example End";
            var lines = codeText
                .Split(new[] { Environment.NewLine }, StringSplitOptions.None)
                .SkipWhile(x => !x.Contains(exampleStart))
                .Skip(1)
                .TakeWhile(x => !x.Contains(exampleEnd))
                .ToArray()
            ;
            var padding = lines[0].TakeWhile(x => x == ' ').Count();
            return string.Join(Environment.NewLine, lines.Select(x => x.Substring(Math.Min(padding, x.Length))).ToArray());
        }
    }
    public class ShowcaseInfo : BindableBase {
        public ShowcaseInfo(string group, string name, Type exampleType, CodeLanguageText csCodeText, CodeLanguageText vbCodeText) {
            Group = group;
            Name = name;
            ExampleType = exampleType;
            CSCodeText = csCodeText;
            VBCodeText = vbCodeText;
        }

        public string Group { get; private set; }
        public string Name { get; private set; }
        public Type ExampleType { get; private set; }
        public CodeLanguageText CSCodeText { get; private set; }
        public CodeLanguageText VBCodeText { get; private set; }
        public FrameworkElement Run() {
            return (FrameworkElement)ExampleType.GetMethod("Run", BindingFlags.Public | BindingFlags.Static).Invoke(null, new object[] { });
        }
    }
}
