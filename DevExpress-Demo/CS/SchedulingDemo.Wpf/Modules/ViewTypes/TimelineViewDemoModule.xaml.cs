using DevExpress.Mvvm;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.Scheduling;
using DevExpress.XtraScheduler.Native;
using System;
using System.Collections.Generic;
using System.Linq;

namespace SchedulingDemo {
    [NoAutogeneratedCodeFiles, CodeFiles(
        "Modules/ViewTypes/TimelineViewDemoModule.xaml",
        "ViewModels/ViewTypes/TimelineViewDemoViewModel.(cs)",
        "Themes/Ribbon.xaml")]
    public partial class TimelineViewDemoModule : SchedulingDemoModule {
        public TimelineViewDemoModule() {
            InitializeComponent();
        }
        bool CoerceDateNavigatorSelectedDates(IList<DateTime> dates) {
            if(dates.Count == 0) return false;
            var start = dates.Min();
            var end = dates.Max();
            if(timelineViewDay.IsActive) {
                dates.Clear();
                dates.Add(start);
                return true;
            }
            if(timelineViewWeek.IsActive) {
                var actualStart = DateTimeHelper.GetStartOfWeekUI(start, scheduler.FirstDayOfWeek);
                var actualEnd = actualStart.AddDays(7);
                dates.Clear();
                while(actualStart < actualEnd) {
                    dates.Add(actualStart);
                    actualStart = actualStart.AddDays(1);
                }
                return true;
            }
            if(timelineViewMonth.IsActive) {
                var actualStart = new DateTime(start.Year, start.Month, 1);
                var actualEnd = actualStart.AddMonths(1);
                dates.Clear();
                while(actualStart < actualEnd) {
                    dates.Add(actualStart);
                    actualStart = actualStart.AddDays(1);
                }
                return true;
            }
            return false;
        }
        void dateNavigatorSettings_CustomizeSelectedDates(object sender, CustomizeSelectedDatesEventArgs e) {
            e.Handled = CoerceDateNavigatorSelectedDates(e.Dates);
        }
        void scheduler_ActiveViewChanged(object sender, ValueChangedEventArgs<ViewBase> e) {
            if(e.NewValue == null) return;
            var selectionStart = scheduler.SelectedInterval.Start;
            var dates = new List<DateTime>() { selectionStart.Date };
            if(!CoerceDateNavigatorSelectedDates(dates))
                return;
            scheduler.Start = dates.Min();
            var intervalDuration = dates.Max().AddDays(1) - dates.Min();
            bool isUnlimitedView = e.NewValue == timelineView;
            bool isDayView = e.NewValue == timelineViewDay;
            if((isUnlimitedView || isDayView) && selectionStart.TimeOfDay == TimeSpan.Zero)
                selectionStart = selectionStart.AddHours(9);
            ((TimelineView)e.NewValue).IntervalDuration = intervalDuration;
            ((TimelineView)e.NewValue).ViewportStart = selectionStart;
            scheduler.SelectedInterval = new DateTimeRange(selectionStart, TimeSpan.Zero);
        }
    }
}
