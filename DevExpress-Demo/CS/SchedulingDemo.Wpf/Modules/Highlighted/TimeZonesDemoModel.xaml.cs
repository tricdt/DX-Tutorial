using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.Scheduling;
using DevExpress.Xpf.Scheduling.Internal;
using DevExpress.XtraScheduler;
using DevExpress.XtraScheduler.Xml;
using SchedulingDemo.ViewModels;
using System;
using System.Collections.Specialized;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;

namespace SchedulingDemo {
    [NoAutogeneratedCodeFiles, CodeFiles(
        "Modules/Highlighted/TimeZonesDemoModel.xaml",
        "Modules/Highlighted/TimeZonesDemoModel.xaml.(cs)",
        "ViewModels/Highlighted/TimeZonesDemoViewModel.(cs)")]
    public partial class TimeZonesDemoModule : SchedulingDemoModule {
        DataTemplate DataSourceFactory { get { return (DataTemplate)Resources["DataSourceFactory"]; } }
        TimeZonesDemoViewModel VM { get { return (TimeZonesDemoViewModel)DataContext; } }
        public TimeZonesDemoModule() {
            InitializeComponent();
            dateTimeSavingMode.ItemsSource = DevExpress.Mvvm.EnumSourceHelper.GetEnumSource(typeof(DateTimeSavingMode));
            storageTimeZone.EditValue = TimeZoneInfo.FindSystemTimeZoneById("AUS Eastern Standard Time");
            Loaded += OnLoaded;
            scheduler.SelectedAppointments.CollectionChanged += OnSelectedAppointmentsCollectionChanged;
            scheduler.AppointmentEdited += OnAppointmentEdited;
        }
        void OnLoaded(object sender, RoutedEventArgs e) {
            UpdateSchedulerDataSource();
        }
        void OnSelectedAppointmentsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e) {
            UpdateSelectedAppointmentInfo();
        }
        void OnAppointmentEdited(object sender, AppointmentEditedEventArgs e) {
            UpdateSelectedAppointmentInfo();
        }

        void OnDateTimeSavingModeEditValueChanged(object sender, DevExpress.Xpf.Editors.EditValueChangedEventArgs e) {
            UpdateSchedulerDataSource();
        }
        void OnStorageTimeZoneEditValueChanged(object sender, DevExpress.Xpf.Editors.EditValueChangedEventArgs e) {
            UpdateSchedulerDataSource();
        }

        void SelectFirstAppointment() {
            scheduler.SelectedAppointments.Clear();
            var pattern = scheduler.AppointmentItems.FirstOrDefault(x => x.Type == AppointmentType.Pattern);
            var occ = pattern != null ? scheduler.GetOccurrenceOrException(pattern, 0) : null;
            scheduler.SelectedAppointments.Add(occ ?? scheduler.AppointmentItems.FirstOrDefault());
        }
        void UpdateSchedulerDataSource() {
            if(!IsLoaded) return;
            var dataSource = (DataSource)DataSourceFactory.LoadContent();
            var mode = (DateTimeSavingMode)dateTimeSavingMode.EditValue;
            var storageTZ = (TimeZoneInfo)storageTimeZone.EditValue;

            dataSource.DateTimeSavingMode = mode;
            switch(mode) {
                case DateTimeSavingMode.Appointment:
                    dataSource.AppointmentsSource = VM.Appointments;
                    break;
                case DateTimeSavingMode.Storage:
                    VM.StorageTimeZone = storageTZ;
                    dataSource.AppointmentsSource = VM.StorageAppointments;
                    dataSource.TimeZone = storageTZ;
                    break;
                case DateTimeSavingMode.Utc:
                    dataSource.AppointmentsSource = VM.UtcAppointments;
                    break;
            }
            scheduler.DataSource = dataSource;
            SelectFirstAppointment();
        }
        void UpdateSelectedAppointmentInfo() {
            aptInfo.Text = null;
            aptDbInfo.Text = null;
            var apt = scheduler.SelectedAppointments.FirstOrDefault();
            if(apt == null) {
                Clear(aptInfo);
                Clear(aptDbInfo);
                return;
            }
            if(apt.Type == AppointmentType.Occurrence)
                apt = scheduler.GetPattern(apt);
            Write(aptInfo, apt);
            Write(aptDbInfo, (AppointmentEntity)apt.SourceObject);
        }

        void Clear(TextBlock tb) {
            WriteText(tb, "No Appointment Selected", false, true);
        }
        void Write(TextBlock tb, AppointmentItem apt) {
            if(apt.AllDay) WriteText(tb, Description_AppointmentItem_AllDay, false, true);
            else WriteText(tb, string.Format(Description_AppointmentItem, TimeZoneOffsetToString(scheduler.TimeZone)), false, true);
            WriteNewLine(tb, true);
            Write(tb, apt.Type, apt.AllDay, apt.Start, apt.End, apt.QueryStart, apt.QueryEnd, apt.TimeZoneId, apt.RecurrenceInfo, apt.Reminder);
        }
        void Write(TextBlock tb, AppointmentEntity apt) {
            if(apt.AllDay) {
                WriteText(tb, Description_AppointmentEntity_AllDay, false, true);
            } else {
                switch(scheduler.DataSource.DateTimeSavingMode) {
                    case DateTimeSavingMode.Utc: 
                        WriteText(tb, Description_AppointmentEntity_UTC, false, true); break;
                    case DateTimeSavingMode.Storage: 
                        WriteText(tb, string.Format(Description_AppointmentEntity_Storage, TimeZoneOffsetToString(scheduler.DataSource.TimeZone)), false, true); break;
                    case DateTimeSavingMode.Appointment:
                        WriteText(tb, string.Format(Description_AppointmentEntity_Appointment, TimeZoneOffsetToString(apt.TimeZoneId)), false, true);
                        break;
                }
            }
            WriteNewLine(tb, true);

            var aptType = (AppointmentType)apt.AppointmentType;
            IRecurrenceInfo recInfo = null;
            if(aptType == AppointmentType.Pattern)
                recInfo = RecurrenceInfoXmlPersistenceHelper.ObjectFromXml(apt.RecurrenceInfo);
            var reminder = ReminderXmlHelper.LoadFromXml(apt.ReminderInfo, null, null).FirstOrDefault();
            Write(tb, (AppointmentType)apt.AppointmentType, apt.AllDay, apt.Start, apt.End, apt.QueryStart, apt.QueryEnd, apt.TimeZoneId, recInfo, reminder);
        }
        void Write(TextBlock tb, AppointmentType type, bool allDay, DateTime start, DateTime end, DateTime queryStart, DateTime queryEnd, string timeZone, IRecurrenceInfo recInfo, ReminderItem reminder) {
            Write(tb, "Type: ", type, false);
            Write(tb, "AllDay: ", allDay);
            Write(tb, "Start: ", start);
            Write(tb, "End: ", end);
            Write(tb, "QueryStart: ", queryStart);
            Write(tb, "QueryEnd: ", queryEnd);
            Write(tb, "TimeZone: ", TimeZoneToString(timeZone));
            if(reminder != null) {
                Write(tb, "Reminder", null);
                Write(tb, "    TimeBeforeStart: ", reminder.TimeBeforeStart);
                Write(tb, "    AlertTime: ", reminder.AlertTime);
            }
            if(type == AppointmentType.Pattern) {
                Write(tb, "RecurrenceInfo", null);
                Write(tb, "    Type: ", recInfo.Type);
                Write(tb, "    Start: ", recInfo.Start);
                if(recInfo.Range == RecurrenceRange.OccurrenceCount)
                    Write(tb, "    OccurrenceCount: ", recInfo.OccurrenceCount);
                else if(recInfo.Range == RecurrenceRange.EndByDate)
                    Write(tb, "    End: ", recInfo.End);
            }
        }
        void Write(TextBlock tb, string caption, object value, bool newLine = true) {
            if(newLine)
                WriteNewLine(tb);
            WriteText(tb, caption, true, false);
            if(value != null)
                WriteText(tb, value.ToString(), false, false);
        }
        void WriteText(TextBlock tb, string text, bool bold, bool italic) {
            tb.Inlines.Add(new Run(text) { 
                FontWeight = bold ? FontWeights.Bold : FontWeights.Normal,
                FontStyle = italic ? FontStyles.Italic : FontStyles.Normal
            });
        }
        void WriteNewLine(TextBlock tb, bool bold = false) {
            tb.Inlines.Add(new LineBreak());
            if(bold)
                tb.Inlines.Add(new InlineUIContainer() { Child = new Border() { Height = 18 } });
        }

        string TimeZoneToString(string timeZone) {
            return TimeZoneToString(TimeZoneInfo.FindSystemTimeZoneById(timeZone));
        }
        string TimeZoneToString(TimeZoneInfo timeZone) {
            return timeZone.DisplayName;
        }
        string TimeZoneOffsetToString(string timeZone) {
            return TimeZoneOffsetToString(TimeZoneInfo.FindSystemTimeZoneById(timeZone));
        }
        string TimeZoneOffsetToString(TimeZoneInfo timeZone) {
            var offset = "UTC";
            if(timeZone.BaseUtcOffset < TimeSpan.Zero)
                offset += "-" + timeZone.BaseUtcOffset.ToString(@"hh\:mm");
            else if(timeZone.BaseUtcOffset > TimeSpan.Zero)
                offset += "+" + timeZone.BaseUtcOffset.ToString(@"hh\:mm");
            return offset;
        }

        const string Description_AppointmentItem_AllDay = "All-day appointments span an entire day regardless of the time zone. The TimeZone property value indicates the time zone in which the AppointmentItem was created.";
        const string Description_AppointmentItem = "DateTime values are in the scheduler's time zone: {0}. The TimeZone property indicates the time zone in which the AppointmentItem was created.";
        const string Description_AppointmentEntity_AllDay = "DateTime values are in an unspecified time zone.";
        const string Description_AppointmentEntity_UTC = "DateTime values are in the UTC time zone.";
        const string Description_AppointmentEntity_Storage = "DateTime values are in the time zone specified by DataSource.TimeZone: {0}.";
        const string Description_AppointmentEntity_Appointment = "DateTime values are in the AppointmentItem's time zone: {0}.";
    }
}
