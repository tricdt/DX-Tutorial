using DevExpress.Xpf.Core;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.Scheduling;
using SchedulingDemo.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace SchedulingDemo {
    [NoAutogeneratedCodeFiles, CodeFiles(
        "Modules/Highlighted/ReceptionDeskDemoModule.xaml",
        "Modules/Highlighted/ReceptionDeskDemoModule.xaml.(cs)",
        "Modules/Common/MedicalAppointmentWindow.xaml",
        "ViewModels/Highlighted/ReceptionDeskDemoViewModel.(cs)",
        "ViewModels/Common/MedicalAppointmentWindowViewModel.(cs)",
        "Themes/ReceptionDesk.xaml")]
    public partial class ReceptionDeskDemoModule : SchedulingDemoModule {
        public ReceptionDeskDemoModule() {
            InitializeComponent();
        }
        void OnAppointmentWindowShowing(object sender, AppointmentWindowShowingEventArgs e) {
            e.Window.DataContext = MedicalAppointmentWindowViewModel.Create(e.Appointment, this.scheduler);
        }
        void OnDropAppointment(object sender, DropAppointmentEventArgs e) {
            e.Cancel = e.ConflictedAppointments.Where(x => x.Count > 0).FirstOrDefault() != null;
        }
        void OnStartAppointmentDragFromOutside(object sender, StartAppointmentDragFromOutsideEventArgs e) {
            if (e.Data.GetDataPresent(typeof(IEnumerable<Patient>)))
                ((IEnumerable<Patient>)e.Data.GetData(typeof(IEnumerable<Patient>))).ToList().ForEach(x => e.DragAppointments.Add(CreateAppointment(x)));
        }
        void OnStartRecordDrag(object sender, StartRecordDragEventArgs e) {
            e.Data.SetData(typeof(IEnumerable<Patient>), e.Records.Cast<Patient>());
            e.Handled = true;
        }
        AppointmentItem CreateAppointment(Patient patient) {
            AppointmentItem result = new AppointmentItem();
            result.CustomFields["PatientId"] = patient.Id;
            result.Subject = patient.Name;
            result.StatusId = ReceptionDeskData.PaymentStateNotYetBilled.Id;
            result.Start = DateTime.Today;
            result.End = result.Start.AddMinutes(20);
            return result;
        }
        void OnCompleteRecordDragDrop(object sender, CompleteRecordDragDropEventArgs e) {
            e.Handled = true;
        }
        void OnDragRecordOver(object sender, DragRecordOverEventArgs e) {
            e.Effects = DragDropEffects.Move;
            e.Handled = true;
        }
        void OnDropRecord(object sender, DropRecordEventArgs e) {
            e.Handled = true;
        }
    }
}
